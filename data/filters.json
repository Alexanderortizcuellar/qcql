[
  {
    "name": "A",
    "parameters": "",
    "arguments": "",
    "example": "A==2",
    "link": "piecedesignator.html#A",
    "description": "any white piece"
  },
  {
    "name": "a",
    "parameters": "",
    "arguments": "",
    "example": "a==2",
    "link": "piecedesignator.html#a",
    "description": "any black piece"
  },
  {
    "name": "abs",
    "parameters": "",
    "arguments": "number",
    "example": "abs #A - #a",
    "link": "abs.html",
    "description": "## `abs`\nThe **`abs`** filter is a **numeric filter** whose value is the absolute value of its single numeric argument.\n\n**Example:**\n```cql\nabs -4 == 4\nabs power a - power A\n```\n\nIf its argument does not match the current position, neither does the `abs` filter.\n\n---\n\n## Examples in Practice\nThe `abs` filter is used in `platzwechselecho.cql` and `platzwechseln2.cql` to check that the knights which have interchanged positions have ranks and files that are at least 3 apart:\n```cql\nabs (rank N1 - rank N2) >= 3\nabs (file N1 - file N2) >= 3\n```"
  },
  {
    "name": "and",
    "parameters": "",
    "arguments": "filter/filter",
    "example": "check and Q==2",
    "link": "and.html",
    "description": "## `and`\nThe **and** filter is a **binary infix filter** that matches a position only if the filter to its left **and** the filter to its right each match the position.\n\nIf `left` and `right` are filters, then:\n\n```\nleft and right\n```\n\nmatches a position exactly when the compound filter:\n\n```\n{\nleft\nright\n}\n```\n\nmatches the position. For example:\n\n```\npower △ > 5 and power ▲ < 3\n```\n\nWhether to use **and** or a compound filter is a matter of taste. One difference is that the compound filter sometimes returns a value, but the **and** filter never does.\n\n### Examples\nThe file `movedblackpieceecho.cql` uses **and** in the line:\n\n```\nx == Mover and source:(x & _)\n```\n\nThis expression is true only if the set variable `x` has the same value as `Mover`, **and** the `x` intersects the set of empty squares in the position represented by `source` (see the `:` operator for a description of its meaning)."
  },
  {
    "name": "ascii",
    "parameters": "",
    "arguments": "string or number",
    "example": "X=ascii \"A\"Y=ascii 65",
    "link": "ascii.html",
    "description": "# `ascii` Filter\n\nThe `ascii` filter takes a **single argument**.\n\n- If its argument is a **string filter** representing a string of a single character, the value of the `ascii` filter is the **ASCII value** of that character.\n- If its argument is a **numeric filter**, the value of the `ascii` filter is the **one-character string** whose ASCII value is the argument.\n\n---\n\n## Matching Rules\n\nThe `ascii` filter matches the current position if:\n\n- A **string argument** has exactly **one character**.\n- A **numeric argument** is between **1 and 255** (inclusive).\n\n> **Note:** Values between `128` and `255` are not technically ASCII (true ASCII < 128), but are accepted here.\n\n---\n\n## Precedence\n\nThe `ascii` filter has **lower precedence** than `+`, which makes it work intuitively with `+`:\n\n```\nascii \"A\"    ≡ 65\nascii \"a\"    ≡ 97\nascii 65     ≡ \"A\"\nascii \\\"     ≡ 34\nascii 34     ≡ \\\"\nascii 65 + 2 ≡ \"C\"\nascii 65 + \"C\" ≡ \"AC\"\n\nascii \"zug\"  // fails to match\n```\n\n---\n\n## Example: Upper to Lower Case\n\nTo convert a single **uppercase** character `C` to lowercase:\n```\nascii ascii C - ascii \"A\" + ascii \"a\"\n```\n\nThis is parsed as:\n```\nascii ((ascii C) - (ascii \"A\") + (ascii \"a\"))\n```\n\n---\n\n## Example: Lower to Upper Case\n\nTo convert a single **lowercase** character `C` to uppercase:\n```\nascii ascii C - ascii \"a\" + ascii \"A\"\n```"
  },
  {
    "name": "assert",
    "parameters": "",
    "arguments": "filter",
    "example": "assert X==0",
    "link": "assert.html",
    "description": "# `assert` Filter\n\nThe `assert` filter takes a **single argument**.\n\n- If the argument matches, the `assert` filter matches.\n- If the argument does **not** match, CQL halts with an error message showing the line number where the `assert` filter failed.\n\n---\n\n## Examples\n```\nassert X == 3\nassert find --> mate\n```"
  },
  {
    "name": "atomic",
    "parameters": "",
    "arguments": "variable",
    "example": "atomic X=1",
    "link": "atomic.html",
    "description": "# `atomic` Variables\n\nIf the first use of a variable is preceded by the keyword `atomic`, that variable is an **atomic variable**:\n\n```\natomic X = 4\natomic Y = \"hello\"\n```\n\n---\n\n## Behavior\n\nInside of a `⊢` filter, atomic variables are treated **transactionally**:\n\n- Their values are **restored** after any failed match of a path.\n- At any point during evaluation, the value of an atomic variable is the same as if **only the moves leading up to the current position** had been evaluated.\n- Changes to that variable along other sequences of moves are **ignored**.\n- At the end of evaluation, the value of the atomic variables is the value at the **end of the matching path**.\n\n---\n\n## Examples\n\n**Setup:**\nIf `variations` is set, CQL considers variations:\n```\ncql (input hhdvi.pgn variations)\n```\n\n### Example 1 — Without `atomic`\n```\nCount = 0\n\n⊢\n  ――\n  Count += 1 *\n```\n- Evaluated at the initial position, `Count` will equal the **total number of positions** in the game, because `⊢` visits each position and increments `Count` after each visit.\n\n---\n\n### Example 2 — With `atomic`\n```\natomic Count = 0\n\n⊢\n  ――\n  Count += 1 *\n```\n- Here, `Count` will be the **length of the longest sequence** of consecutive moves in the game.\n- This is because `⊢` only retains changes from the **matching sequence** of moves.\n- After evaluation, `Count` equals the number of moves in that sequence.\n\n---\n\n## Limitations\n- The `atomic` keyword **does not** currently support variables that are dictionaries."
  },
  {
    "name": "B",
    "parameters": "",
    "arguments": "",
    "example": "B==2",
    "link": "piecedesignator.html#B",
    "description": "white bishop"
  },
  {
    "name": "b",
    "parameters": "",
    "arguments": "",
    "example": "b==2",
    "link": "piecedesignator.html#b",
    "description": "black bishop"
  },
  {
    "name": "between",
    "parameters": "",
    "arguments": "(setset)",
    "example": "between(R k)",
    "link": "between.html",
    "description": "# `between` Filter\n\nThe `between` filter consists of the single word `between` followed by **two set filters** enclosed in parentheses:\n\n```\nbetween(♖ ♛)\nbetween(△ → □ ▲ → ♛)\nbetween(from to)\n```\n\n---\n\n## Definition\n\nSuppose **x** and **y** are two squares on an empty chessboard.  \nA square **z** is *between* **x** and **y** if:\n\n1. The center of **z** lies on the line segment between the centers of **x** and **y**.\n2. **z** is **neither** **x** nor **y**.\n3. The line segment is along a **basic direction** — meaning a queen on **x** must be able to attack **y**.\n\n---\n\n### Examples\n\n- There are **no** squares between `a1` and `h7`.\n- `b2` is the only square between `a1` and `c3`.\n\n---\n\n## Filter Semantics\n\nSuppose **s** and **t** are set filters whose corresponding sets of squares in the current position are **S** and **T**.\n\n`between(s t)` is the set of squares **z** such that **z** is *between* some square **x** in **S** and **y** in **T**.\n\n---\n\n## Example Usage\n\nFrom *D. Hlebec 2015*, found via the CQL file `8piecesinline.cql`:\n\n> Matches a position containing a line — orthogonal or diagonal — with **8 pieces**.\n\nRunning:\n```\ncql (input 8piecesinline.cql)\n```\non the sample database will find such positions, including the diagram from the example above."
  },
  {
    "name": "black",
    "parameters": "",
    "arguments": "",
    "example": "black",
    "link": "black.html",
    "description": "# `black` Filter\n\nThe `black` filter is a **numeric filter** that represents the **black side to move**.  \nIts value is `-1`.\n\n---\n\n## Example\n```\nsidetomove == black\n```\n\nThe above can be more easily expressed using:\n```\nbtm\n```\nwhich is shorthand for \"black to move.\""
  },
  {
    "name": "btm",
    "parameters": "",
    "arguments": "",
    "example": "btm",
    "link": "btm.html",
    "description": "# `btm` Filter\n\nThe `btm` filter matches a **position in which it is Black to move**.\n\n---\n\n## Syntax\n```\nbtm\n```\n\n---\n\n## Examples\n\nThe `btm` filter is used in various CQL files, such as:\n\n- `fatamorgana.cql`\n- `zugzwang2.cql`\n- All mate-related filters, e.g.:\n\n```\nbtm mate\n```\nMatches a position in which **Black is checkmated**."
  },
  {
    "name": "castle",
    "parameters": "",
    "arguments": "",
    "example": "castle",
    "link": "currentmove.html#castle",
    "description": "castling"
  },
  {
    "name": "check",
    "parameters": "",
    "arguments": "",
    "example": "check",
    "link": "check.html",
    "description": "The check filter matches \na position in which one side is in \ncheck:\n\n  check\n\n\nExamples\n\nThe \ncheck\n filter is of \ncourse used extensively in the CQL \nexamples\n, \nnotably in\n\nmultiple-discovered-checks.c\nql\n, where games with at least 5 \ndiscovered checks are found. It is \nalso used e.g. in\n\nconsecutive-checks.cql\n and \nconsecutive-checks-by-o\nne-color.cql"
  },
  {
    "name": "child",
    "parameters": "",
    "arguments": "(number)",
    "example": "child(3)",
    "link": "child.html",
    "description": "# `child` Filter\n\nThe `child` filter returns the **primary child** of the current position.\n\n---\n\n## Usage\n\n```\nx = child\n```\n- Sets variable `x` to the **primary child** of the current position.\n- If the current position is a **terminal position**, the assignment will not match and `x` will remain unchanged.\n- If `variations` is **not** set in the CQL header, then the **primary child** is the same as the **child**, since any position has at most one child.\n\n---\n\n## Indexed Children\n\nIf `child` is followed by a numeric filter in parentheses, then the child with that index is returned:\n\n```\nx = child(1)\n```\n- `i` is the value of the numeric filter.\n- If no such child exists, the filter does **not** match.\n- `child` without arguments is equivalent to `child(0)`.\n\n---\n\n## Getting the Number of Children\n\nExample:\n```\ncountmoves\n```\nReturns the number of children in the current position."
  },
  {
    "name": "child",
    "parameters": "",
    "arguments": "",
    "example": "child",
    "link": "child.html",
    "description": "The \nchild\n filter returns \nthe \nprim\nary child\n of the current position.\nThus,\n\n\n\n  x=child\n\nwill set the variable \nx\n \nto the primary child of the current \nposition (if the current position is a\nterminal position, then the assignment\nwill not match and \nx\n will\nnot be modified). Recall that if \nv\nariations\n is not set in the CQL \nheader, then the primary child of the \ncurrent position is the same as the \nchild, as any position has at most one\nchild.\n\n\nIf the \nchild\n filter is \nfollowed by a numeric filter enclosed \nin parentheses, then the the child \nwith index \ni\n is returned, \nwhere \ni\n is the value of that \nnumeric filter:\n\n  x=child(1)\n\nIf no such child exists, the filter \nwill not match. Thus \n\nchild\n without an argument\nis the same as \nchild(0)\n.\n\n\n\nGetting the number of \nchildren\n\nThe following computes the number of \nchilden in a position:\n\n  countmoves \n――\n&lt;\n/pre&gt;"
  },
  {
    "name": "comment",
    "parameters": "",
    "arguments": "(filter...)",
    "example": "comment(\"x is\" x)",
    "link": "comment.html",
    "description": "You can annotate the PGN output of CQL\nusing the \ncomment\n filter.\nA comment filter consists of the word \n\ncomment\n followed by a \nlist of arguments enclosed in \nparentheses:\n\n  comment (\"The white king is on \nsquare: \" K)\n\n\n\nEach argument in the argument list can\nbe any filter.\nIf there is only one argument, the \nenclosing parentheses can be omitted. \nThe conversion is performed exactly \nlike \nstr. \nIn the example above, the first \nargument is the quoted string \n\n\"The white king is on square: \n\"\n and the second argument is \nthe \npiece \ndesignator\n \nK\n, which \ndenotes the square where the white \nking is. If this comment filter is \nevaluated at the start position, the \ncomment \nThe white king is on \nsquare: e1\n will be inserted \ninto the PGN file.\n\n\n  A comment filter matches any \nposition.\n\n\nIf the argument is a \nstring filter\n,\nthe comment filter outputs the value \nof the filter as a string (or \n\n<false>\n if the \nargument fails to match).\n\n\nIf the argument is a \nset \nfilter\n (other than a \npiece \nvariable\n) the comment filter \noutputs the set of squares to which it\ncorresponds. If the argument is a \npiece variable, the comment filter \noutputs the character representation \nof the piece that is the value of the \npiece variable, as well as the square \nit is on. \n\n\n  \n\n    If the argument is a \nposi\ntion filter\n, the comment filter \noutputs the textual representation of \nthe corresponding position location. \nIf the position is in the\n    \nmainline\n, \nthen this textual representation \nconsists of the move number and side \nto move (e.g. \nmove 24 \n(wtm)\n). If the position is in a\n\nvariation\n, \nthen, in addition to the move number \nand side to move, the \npositionid\n \nof the value of the argument is also \noutput. In addition, that id is output\nat the position location itself.\n\n\n\n\n  If the filter has no value, then \neither \n<true>\n or \n\n<false;>\n is output \ndepending on whether the filter \nmatches:\n  \n     comment (\"check is: \" \ncheck)\n\n  will output either \ncheck is \n<true>\n or \ncheck is \n<false>\n depending on \nwhether the current position is check.\n  \n  \n///\n\n  In almost all cases, the  \n///\n is the preferred way to use the \ncomment filter. All text following \n\n///\n until the end of line\nis considered to form the arguments to\na a comment filter. \n  \n    \n♖\n→\n♚\n /// \n\"Check from \" \n♖\n\n     \n≡\n\n    \n♖\n→\n♚\n \ncomment (\"Check from \" \n♖\n)\n\n\n\n  \n////\n however is treated\nas a normal textual comment to the \n.cql file, like \n//\n\n  \n  \nWhere the \ncomment is inserted\n\n  In PGN, positions are not commented:\n\nmoves\n are commented. But in \nCQL, a comment filter is evaluated at \na particular position. Therefore, the \ncomment associated with a comment \nfilter is output in the PGN file just \nafter the previous move to the \nposition (or before the initial \nposition, if the current position is \nthe initial position).\n\nUsing comment with\nthe move filter\n\n\n\n  \nSmart comments\n\n  CQL tries to avoid cluttering the \npgn files with unnecessary comments. \nIt does that in two ways:\n  \n\n    \nIf a filter doesn't match a \nposition all its \"associated comments\"\nare deleted. The associated comments \nof a filter are comments that appear \nin the filter.\n    \nOnly comments associated with \nthe maximum value of a sort filter are\noutput.\n  \n\n  \nsmart comments as part of \nanother filter\n\n  For example, comments in a compound \nfilter are not printed unless the \nwhole compound filter matches:\n  \n    {/// \"This will not be output\"\n    \n♖\n==K}\n\n  \nsmart comments as part of a \n\n――\n \nfilter\n\n  This feature is particularly useful \nin conjunction with \n⊢\n, \nbecause each\n  move in a particular can be \ncommented, but the comments will only \nbe printed if the whol\n  maneuver matches:\n  \n    \n⊢\n \n      \n――\n \ncheck ///\"the first check\"\n      \n――\n \ncheck ///\"the second check\"\n      \n――\n \nmath ///\"and mate\"    \n\n\n\n  Here, the \n⊢\n \nfilter is intended to match a maneuver\nin which two consecutive checks are \ndelivered followed by mate on the next\nmove. The output PGN file will\n  comment only moves which are part of\nthe entire maneuver: a check that that\nis not followed by a check and mate \nwill not be commented.\n  \nsmart \ncomments as part of a sort filter\n\nAn example of the use of smart \ncomments with sort is in \nmost-visited-square-2.cql\n: \n  \ninitial\nsquare VisitedSquare in .\n sort \"max number of visits to a \nsingle square\"{\n   ///\"The most visited square is: \" \nVisitedSquare)\n   find all\n      move to VisitedSquare\n  }\n≥\n 15\n\n  The main work here is done by the \n\nfind\n filter, which finds \nand comments all visits to the square \n\nVisitedSquare\n (which is \nset sequentially to each square on the\nboard). The \nfind\n filter \nis being sorted, together with a \ncomment that states what the most \nvisited square actually is. \n\n\n  Without smart comments, this CQL \nfile would print comments for each \nsquare on the board, for each move in \nfact. Because of smart comments and \nthe \nsort\n, however, only \nthe comments that pertain to the value\nof \nVisitedSquare\n for \nwhich the maximum number of visits was\nreached are inserted into the \noutput PGN file\n.\n\n\n  Note as well how only the moves that\nmove to the most visited square are \ncommented as \"Found\" in the pgn file. \nThat is because all the comments \npertaining to visits by other squares \nare automatically discarded by the \nsmart comment logic.\n  \nDisabling \nsmart comments\n\n  Smart comments can be disabled by \nusing specifying \n-alwayscomment\n as a \ncommand line option.\n  \nControlling which comments are \noutput\n\n  CQL inserts three kinds of comments \ninto output PGN files:\n  \n\n    \nUser-generated comments via \nthe \ncomment\n filter.\n    \nCQL-generated comments \nassociated to certain filters \n(\nfind\n, \necho\n,\n\nline\n, \n\nconsecutivemoves\n).\n    \nHeader comments: \nthe game number, and the values of \nsort\n fields\n    \nThe comment \n\"CQL\" in a position that matches the \nbody of the CQL file.\n  \n\n  By default all these are output.\n\n\n\n  If the CQL header \ncontains the word \nquiet\n \nor if CQL was invoked with the \n\n-quiet\n option, only \nuser-generated comments and header \ncomments are output.\n\n\nThe following filters output \nCQL-generated comments: \nfind\n, \necho\n, \n⊢\n, \nsort\n, \nconsecuti\nvemoves\n. If such a filter is \nimmediately followed by the keyword \n\nquiet\n, its CQL-generated \ncomments are suppressed.\n\n\n\n  If the CQL header \ncontains the word \nsilent\n \nor if CQL was invoked with the \n\n-silent\n option, no \ncomments are inserted into the PGN \nfile.\n\n\n  If the CQL header a different level \nof quietness than an option specified \nat the command line, the command line \noption controls.\n\n\n  The word \nCQL\n can be \nchanged by using the \nmatchstring\n\nquoted_string\n \n header \noption or the \n-matchstring \n\nstring\n \n command line \nparameter. If an argument to \n\nmatchstring\n is the empty \nstring, then the \nCQL\n word\nis not printed on matching.\n      \n  \nNotes on comment\n\n  Comments are very useful both for \ndebugging and for explaining the \noutput. For example, to show the value\nof a variable, use say\n  \n    x= #\n♙\n\n    ///\"The white pawns are on \nsquares: \" \n♙\n \n              \"and the value of x is: \n\" x)\n\n\n\n  \nExamples\n\n  The diagram below shows the oldest \nsmothered mate study:\n\nLucena 1497\n \n(found from CQL \nfile: \nsm\notheredmate2.cql\n)\n\n\n\n\n\n\n\n\n  Note how in the \noutput file\n generated from the\n  CQL, the blockers of the black king \nare annotated.\n\n\n  A more sophisticated example is from\n\nseri\nalpin-out.pgn\n. Note the comments \nto the following position, taken from \na Troitzky/Korolkov study:\n  \nTroi\ntzky/Korolkov 1938, (corrected \n2004)\n \n(found from CQL file: \nserialp\nin.cql\n)\n\n\n\n\n\n\n\n\n  The comment is:\n  \n    Pin chain: Rd8 pins bd7 pins Bb5 \npins rc4 pins Rb4\n\n  This uses smart comments to make \nsure only the correct pins are \nprinted. Without delving too deeply \ninto the specific logic\n  of \nserialpin.cql\n, each \npinned piece in a position makes a \nsequence of comments that describe the\npin chain\n  beginning at that piece. At the end,\nhowever, only the longest chain is \nactually output to the PGN file.\n\n\n  Another example of smart comments is\nin the file \nmost-visited-square-2.cql\n, \nwhich was discussed above."
  },
  {
    "name": "connectedpawns",
    "parameters": "",
    "arguments": "",
    "example": "connectedpawns",
    "link": "connectedpawns.html",
    "description": "# connectedpawns\n\n**Description:**  \nThe `connectedpawns` filter in **CQL** (Chess Query Language) returns the set of connected pawns in the current position.\n\n**Value:**  \nThe value is the set of squares occupied by connected pawns.  \n\n**Example:**  \nIn the initial chess position, the value of `connectedpawns` is the 16 squares:  \na2 b2 c2 d2 e2 f2 g2 h2  \na7 b7 c7 d7 e7 f7 g7 h7\n\n**Equivalent CQL Expression:**\n```cql\nnotransform\nflipcolor {\n    ♙ &\n    horizontal 1\n    vertical 0 7 ♙\n}"
  },
  {
    "name": "consecutivemoves",
    "parameters": "rangequiet",
    "arguments": "(position position)",
    "example": "consecutivemoves(source target)",
    "link": "consecutivemoves.html",
    "description": "# consecutivemoves\n\n**Description:**  \nThe `consecutivemoves` filter takes two position variables in parentheses as arguments, optionally preceded by a range:\n\n`consecutivemoves (x y)`  \n`consecutivemoves 5 1000 (x y)`\n\nSuppose the arguments to the `consecutivemoves` filter are the position variables `x` and `y`. The filter first finds the **latest common ancestor** `L` of the positions represented by `x` and `y`.\n\nLet `S` be the sequence of moves from `L` to `x`.  \nLet `T` be the sequence of moves from `L` to `y`.\n\n- `S` and `T` are the exact moves, in order, played to reach `x` from `L` and `y` from `L` respectively.  \n- The length of `S` = ply value of `x` − ply value of `L`.  \n- The length of `T` = ply value of `y` − ply value of `L`.\n\nThe filter `consecutivemoves(x y)` gives the length of the longest sequence of consecutive moves in `S` that is identical to a sequence of consecutive moves in `T`.\n\n**Range Condition:**  \nIf a range is specified, the filter only matches if the length lies within the range. If either argument filter does not match, neither does `consecutivemoves`.\n\n**Comments:**  \nThe filter adds comments to the longest pair of subsequences of consecutive moves that it finds (unless `quiet` or `silent` is specified in the CQL header). These comments indicate which move in one subsequence matched which move in the other. If `quiet` is included, no comments are output.\n\n**Usage Example:**  \n`consecutivemoves quiet 15 100 (source target)`\n\n**Applications:**  \nUsed in locating “logical” studies, where one key move (the move in the LCA position) has a small difference that only becomes apparent later. For example, in the CQL file `zugzwang2.cql`, it finds positions differing only in side to move that are reached by identical move sequences.\n\n**Didukh Study Example:**  \nIn Didukh 2011, after 1...Nf5:  \n- If White plays `2. Kf3!`, the game leads to a winning position.  \n- If White plays `2. Kf2`, the resulting position is identical except that it is White to move instead of Black.  \nThe sequences of moves to reach both positions are the same for 15 consecutive moves.\n\nFrom the PGN output, the correspondence of moves is indicated with comments like `target-move[1]` and `source-move[1]`, showing the matching move order (e.g., `...Ne7` in both sequences).\n\n**Example CQL Call:**  \n`consecutivemoves (source target) >= 5`"
  },
  {
    "name": "countmoves",
    "parameters": "",
    "arguments": "――filterlegal――filterpseudolegal――filter",
    "example": "countmoves legal ♔――",
    "link": "countmoves.html",
    "description": "# `countmoves` Filter\n\nThe `countmoves` filter in CQL counts the number of moves matching a given move filter expression.\n\n---\n\n## Syntax\n\n```cql\ncountmoves <move-filter>\ncountmoves legal <move-filter>\n```\n\n- `<move-filter>`  \n  Any valid CQL move filter expression (e.g. `check`, `capture`, etc.).  \n- The optional `legal` keyword restricts the count to legal moves only.\n\n---\n\n## Description\n\n- Begins with the keyword `countmoves`.  \n- May be followed directly by a move filter, or by the keyword `legal` then a move filter.  \n- Returns the integer number of moves that satisfy the filter in the current position.\n\n---\n\n## Examples\n\n1. Count all moves that deliver check, and require at least 3 such moves:\n   ```cql\n   countmoves (check) >= 3\n   ```\n2. Ensure there is exactly one legal move in the position:\n   ```cql\n   countmoves legal == 1\n   ```\n\n---\n\n## Counting All Children\n\nTo obtain the total number of possible moves (children) in the current position, use `countmoves` without any additional filter:\n\n```cql\ncountmoves\n```"
  },
  {
    "name": "currentmove",
    "parameters": "",
    "arguments": "――filter",
    "example": "not currentmove ――=△",
    "link": "currentmove.html#currentmovefilter",
    "description": "# Current Move Concept\n\nAny chess move in a PGN file is uniquely determined by its tail—the position resulting from that move. CQL identifies each position by the move leading up to it, called the current move. The current move serves as the conceptual handle for filters and programming techniques.\n\n---\n\n## Conceptual Uses of the Current Move\n\n- Filters that expose attributes of the current move (e.g., `from`, `to`).  \n- The `currentmove` filter for direct predicates on the current move.  \n- Programming patterns that equate the current position with its current move (see examples in `lacny.cql`).\n\n---\n\n## Current Move Information Filters\n\nCQL provides filters that query specific properties of the move that led to the current position:\n\n- **from**: Origin square(s) of the moving piece(s).  \n- **to**: Destination square(s) of the moving piece(s).  \n- **enpassant**: True if the move was an en passant capture.  \n- **enpassantsquare**: The en passant capture square, or empty set if not applicable.  \n- **nullmove**: True if the move is a null move.  \n- **primary**: True if the move was the main line move (first in PGN).  \n- **secondary**: True if the move was a variation (not primary).  \n- **o-o**: Kingside castle.  \n- **o-o-o**: Queenside castle.  \n- **castle**: Any castling move.\n\n---\n\n## The `currentmove` Filter\n\n**Syntax:** `currentmove x` — True if filter `x` matches the current move.\n\n**Example:**\n\n    currentmove △\n\nTrue if the current move was by a white piece; the position would then be black to move.\n\n## Using `not currentmove`\n\n**Example:**\n\n    not currentmove ――=△\n\nTrue if the current move was not a promotion.\n\n**Example:**\n\n    not currentmove ♖×♟(check)\n\nTrue if the current move was not a capture of a black pawn by a white rook giving check.\n\n## `from` and `to` under Castling\n\nWhen the current move is castling:\n\n- `from` returns the origin squares of both moving pieces (e.g., white kingside castling: `[h1, e1]`).  \n- `to` returns the destination squares of both moving pieces.  \n\nWhen evaluated inside another filter, `from` and `to` respect that filter’s left and right restrictions. See contextual castling documentation for details."
  },
  {
    "name": "currentposition",
    "parameters": "",
    "arguments": "",
    "example": "currentposition",
    "link": "currentposition.html",
    "description": "# Current Position\n\nAt any given time when playing through a game, CQL has a concept of the current position. The current position is the position that CQL is currently examining. Any filter is always evaluated with respect to the current position.\n\n## The ∙ Filter\n\nThe current position is the value of the ∙ (or `currentposition`) filter:\n\n    x = ∙\n\nThus, CQL successively sets the current position to each position it examines.\n\n    Start = ∙\n\n## Example\n\nConsider the PGN file:\n\n    1. e4 e5 2. Nf3 Nc6 3. Bb5 a6\n\nWhen run on this game, the current position will be set successively to the start position, the position after `1. e4`, and so on, for seven positions in total (the position after each of the six moves, plus the initial position).\n\nIf the filter is say\n\n    ♗b5\n\nthen that filter will match exactly two of those seven positions, namely the positions following White’s third move.\n\n## Filters that Modify the Current Position\n\nMost filters are evaluated in a way that does not change the current position. However, some filters temporarily modify the current position in order to evaluate their arguments with respect to some new current position. Once such a filter is finished, the current position returns to what it was before the filter was evaluated.\n\nThe filters that (temporarily) modify the current position are:\n\n- `path` filter (or `⊢`)\n- `⊢`\n- `find`\n- `echo`\n- `:`\n\nIn using these, it is sometimes helpful to save the current position in a temporary variable so that it can be referred to later during the evaluation. For example, in `excelsior-return.cql`, the current position is saved in a variable `Start` so that it can be referred to later.\n\n---\n\n## Current Position and Variations\n\nIf the `variations` parameter is not set in the CQL header, the current position will always be set to a mainline position. Otherwise, the current position will also include positions in variation."
  },
  {
    "name": "currenttransform",
    "parameters": "",
    "arguments": "",
    "example": "currenttransform",
    "link": "currenttransform.html",
    "description": "The \ncurrenttransform\n \nfilter has value a string representing\nthe current \ntransforms\n \nacting on the filter, in right-to-left order. It takes no arguments and \nalways matches. It is usually used \nwith \nmessage\n or \ncomment\n for \ndebugging.\n\n\n\n  For example,\n  \n    message currenttransform \n\n  outputs just the string \n\n&lt;&gt;\n.\n\n\n    But\n    \n      X=a1\n      flipvertical{\n        X== h1\n        message currenttransform\n\n\n\n    will output the message:\n    \n&lt;reflect_v&gt;\n .\n      \n    A more complex example:\n    \n  shift \n⬓\n✵{\n  \n♖\na1 \n\n♜\na7\n  comment(notransform a1 &#34;--&gt;&#34; a1\n          &#34;; &#34;\n          notransform a7 &#34;--&gt;&#34; a7\n      &#34; via: &#34; currenttransform)}"
  },
  {
    "name": "dark",
    "parameters": "",
    "arguments": "set",
    "example": "dark B",
    "link": "dark.html",
    "description": "The `dark` filter takes a **single set filter** as an argument.  \nIts **value** is the set of **dark squares** that are in the set of squares represented by its argument.\n\n---\n\n**Example:**  \nTo find positions with more than one dark-squared white bishop:\n```\ndark ♗ > 1\n```\n\n---\n\nThe set of dark squares (`dark ▦`) can be computed directly via:\n```\ndiagonal 0 7\n    diagonal 0 7 a1\n```\n\n---\n\n## Examples of use\n\nThe `dark` filter is used in `chameleon.cql`.  \nWhen run on a sample database, it matches the following study from John Nunn with two thematic positions:\n\n- Nunn 1994, after 8. Rhe7  \n- Nunn 1994, after 12. Kf1  \n\nThese positions differ in that the pieces have all been rigidly shifted and stand on different colored squares.\n\n---\n\nA typical filter from `chameleon.cql` is:\n```\nlight ♔ and source:dark ♔\n```\nThis matches a position in which the **white king** is on a light square in the current position and a dark square in the position represented by the position variable `source`."
  },
  {
    "name": "date",
    "parameters": "implicit search parameter",
    "arguments": "",
    "example": "date~~\"199[5-9]\"",
    "link": "tagqueryfilters.html#date",
    "description": "date and \neventdate"
  },
  {
    "name": "depth",
    "parameters": "",
    "arguments": "",
    "example": "depth>4",
    "link": "depth.html",
    "description": "## `depth` Filter\n\nThe `depth` filter is a numeric filter whose value is the **depth of the current position**.  \nAny mainline position has a variation depth of `0`.\n\nIf **X** is a position other than the initial position, then:\n\n- If X is the **primary child** of its parent, its variation depth equals the variation depth of its parent.\n- If X is **not** the primary child of its parent, its variation depth is the variation depth of its parent **plus 1**.\n\nThus, the two lines below match the same set of positions:\n\nvariation depth > 0"
  },
  {
    "name": "dictionary",
    "parameters": "",
    "arguments": "",
    "example": "dictionary X[\"a\"]=\"bc\"",
    "link": "dictionary.html",
    "description": "# Dictionary\n\nA **dictionary** associates **keys** to **values**.\n\nBy default, dictionaries are **persistent**, retaining their values across games.\n\n---\n\n## Dictionary Entries\n\nFormally, a dictionary is a **collection of dictionary entries**, each of which is a pair of **permitted values**.  \nA permitted value is either:\n\n- A string\n- A number\n- A position\n- A set of squares\n\nThe first element in each dictionary entry is called the **key** of that entry.  \nThe second element is the **value** of that entry.  \nNo two entries in the dictionary share a key.\n\nA dictionary can have only a single type of key and only a single type of value, although the types of keys and values can be different.\n\nA dictionary is defined by preceding its name (a variable) with the keyword `dictionary`.\n\n---\n\n## Persistence of Dictionaries\n\nA dictionary is **persistent** by default, retaining its value across games.  \nAny use of such a dictionary will force CQL to be single-threaded.\n\n---\n\n## Local (Non-Persistent) Dictionaries\n\nIf the first use of the dictionary is preceded by the keyword `local`, the dictionary is **local**.  \nA local dictionary is **not persistent**: it is cleared before each new game is read.\n\nExample:\n\n```cql\nlocal dictionary D\n```\n\nThe example file `followpath.cql` illustrates the use of local dictionaries.\n\nOnly local dictionaries can have keys or values that are positions.  \nIf you want to store positions in a persistent dictionary, use the FEN of the position or some other characteristic of the position.\n\n---\n\n## Compatibility with CQL 6.1 and Initializing Dictionary Types\n\nSometimes it is necessary to initialize a dummy element just to let the parser know what the types of a dictionary are.  \nIf necessary, this dummy element can be deleted immediately after initialization:\n\n```cql\ndictionary D[\"tmp\"] = \"none\"\nif D[\"foo\"] == \"bar\"\n    D[\"foo\"] = \"fum\"\n```\n\nThis might be necessary when converting some code from CQL 6.1 to CQL 6.2.  \nCQL 6.1 dictionaries only allowed string keys and values, so the parser could make type inferences without explicit initialization.\n\n---\n\n## Examples\n\nSuppose `D` is a dictionary. The value of the entry in `D` with key `key` is `D[key]`.\n\n```cql\ndictionary D\nD[\"hello\"] = \"goodbye\"\nD[\"up\"] = \"down\"\n\"goodbye\" == D[\"hello\"]\n\"down\" == D[\"up\"]\nD[\"fail\"] // fails to match\n```\n\nIf a dictionary `D` has no entry with key `key`, then `D[key]` will fail to match.  \nOtherwise, the expression will match.\n\nDictionaries cannot currently be used as the actual argument to a function or returned as the value of a filter.  \nThus, the actual variable name must be used.\n\n---\n\n## Counting Elements of a Dictionary\n\nIf `D` is the name of a dictionary, then `#D` is the number of entries:\n\n```cql\ndictionary Dict\n#Dict == 0\nDict[a3] = \"knight\"\n#Dict == 1\n```\n\n---\n\n## Iterating Through a Dictionary\n\nLoop through keys with:\n\n```cql\nkey ∊ dictionary\n    body\n```\n\nWhere:\n\n- `key` is a variable\n- `dictionary` is the dictionary's name\n- `body` is any filter\n\nExample:\n\n```cql\ndictionary E[\"1\"] = \"2\"\ndictionary E[\"No\"] = \"yes\"\nK ∊ E\n    message(\"E[K]: \" E[K])\n```\n\nWorks with any allowed type:\n\n```cql\ndictionary F[ a2 ] = 45\nF[ b1-8 ] = 4\nR ∊ F\n    message(\"F[R]: \" F[R])\n```\n\nNote: spaces are required inside brackets when using coordinates (e.g., `[ a2 ]`) to avoid them being interpreted as piece designators.\n\n---\n\n## Clearing Entries in a Dictionary\n\nTo delete an entry with key `key` in dictionary `D`:\n\n```cql\nunbind D[key]\n```\n\nTo delete all entries:\n\n```cql\nunbind D\n```\n\nExample:\n\n```cql\ndictionary D\nD[\"check\"] = \"mate\"\nD[\"back\"] = \"rank\"\n#D == 2\nunbind D[\"check\"]\nnot D[\"check\"]\n#D == 1\nunbind D\n#D == 0\n```\n\n---\n\n## Example Use Case\n\nFinding pairs of games with the same initial position:\n\n```cql\ncql(input \"hhdbvi.pgn\")\ndictionary InitialD\ninitial\nif InitialD[fen] ~~ \"gamenumber: (\\\\d+)\"\n    comment(\"Position already seen at game number: \" \\1)\nelse\n    InitialD[fen] = str(\"gamenumber: \" gamenumber)\n```\n\n---\n\n## Summarizing Dictionary Contents at End of Processing\n\nCurrently, there is no direct way to iterate through a dictionary after processing the last game.  \nA workaround:\n\n```cql\nSuccess = 0\nif user_filter\n    Success = 1\nif gamenumber == lastgamenumber and not position positionid+1 {\n    Key ∊ D\n        message(Key \": \" D[Key])\n}\nSuccess == 1\n```\n\nIf you need this feature, contact CQL support."
  },
  {
    "name": "distance",
    "parameters": "",
    "arguments": "(positionposition)",
    "example": "distance(source target)",
    "link": "distance.html",
    "description": "distance\n\nThe \ndistance\n filter is a numeric filter\n that takes two \nposition filters enclosed in \nparentheses as arguments. It returns \nthe number of moves in the game tree \nthat separate the positions \nrepresented by these arguments:\n\n\n\n  distance(\nx\n \n\ny\n)\n\n\n\nThe value \ndistance(\nx\n \n\ny\n)\n can be computed as \nfollows:\n\n\n  \nIf either the filter \n\nx\n or the filter \n\ny\n does not match\nthe position, then neither does the \n\ndistance\n filter\n  \n otherwise, let L be the LCA of \n\nx\n and \ny\n. \nThen the \nvalue\n is \nthe sum of \ndistance(x L)\n \nand \ndistance(y L)\n\n\n\nNote that:\n\n\n  \n if \nx==y\n then \n\ndistance(x y)==0\n\n    \n if \nx\n is an \nancestor of \ny\n then their \ndistance is the number of moves \nbetween them.\n\n\n\nIn CQL, this could be written as a \nfunction:\n\n\n\n   function(x y){\n   L= LCA(x y)\n   (x:ply - L:ply) + (y:ply  - \nL:ply)}\n\n\n\nThis works because \nx:ply\n \nis the value of the \nply\n \nfilter at the position \nx\n,\nwhich is the same as saying the ply \nvalue of position \nx\n.\n\n\n\nDon&#39;t confuse \ndistance\n \nwith the Euclidean distance between \ntwo squares on the chessboard. The \nconcepts aren&#39;t related.\n\nExamples\n\nThe \ndistance\n filter is \nmainly used in \necho filters\n , \nwhich looks for pairs of positions \nthat have certain similarities. Often \nwe want to make sure the\npositions are not &#34;too close&#34; in the \ngame tree, when the resulting patterns\nis boring. Sometimes we want to sort \nby this distance as well, since how \nfar apart\nthey are.\n\n\n\ndistance\n is used in with \nthe \necho\n filters in \nfatam\norgana.cql\n, \n\nqueenpawnpinecho.cql\n, and \nunderpromotionecho.cql\n in this \nway."
  },
  {
    "name": "doubledpawns",
    "parameters": "",
    "arguments": "",
    "example": "doubledpawns>= 4",
    "link": "doubledpawns.html",
    "description": "The \ndoubledpawns\n filter \nhas a value equal to the set of \nsquares on which there are doubled \npawns in the position:\n\n  doubledpawns\n\n\n\nThe \ndoubledpawns\n filter \nis equivalent to\n\n notransform\n  \n⬓\n{\n    \n♙\n&amp;v\nertical \n♙\n}"
  },
  {
    "name": "down",
    "parameters": "range",
    "arguments": "set",
    "example": "down P",
    "link": "direction.html#downfilter",
    "description": "down"
  },
  {
    "name": "echo",
    "parameters": "inallecho quiet",
    "arguments": "(variablevariable)",
    "example": "echo(s t)s&t==.",
    "link": "echo.html",
    "description": "The \necho\n filter lets \nyou look for positions that have a \nspecified relation to the current \nposition. The normal use of the \n\necho\n filter has the \nfollowing syntax:\n  \n    echo (\nsource_var\n \n\ntarget_var\n) \n\nbody_filter\n\n\n\n    Here \nsource_var\n and \n\ntarget_var\n are variable \nnames, and \nbody_filter\n is a \nfilter.\n\n\n  The operation of \necho\n \nis as follows:\n    \n\n      \nThe variable \n\nsource_var\n is set to the \ncurrent position. This is called the \n\nsource position\n\n      \nFor each position \nP\n\nother the source position in the game:\n    \nthe current position is \nset to \nP\n, the \ntarget \nposition\n\n      \ntarget_var\n is set \nto the current position\n      \nbody_filter\n is \nevaluated\n    \n\n    \n\n\n\n    The echo filter matches the \ncurrent position (which is the source \nposition) if \nbody_filter\n was \ntrue for some target position. \n\n\n    After completion, of course, the \ncurrent position is restored to its \noriginal value, and \n\nsource_var\n and \n\ntarget_var\n are reset.\n    \nincluding the \nsource position as a target\n\n    If the \necho\n filter \nincludes the keywords \nin \nall\n just before the body \nfilter, then the target position will \nbe set to the source position as well \nas to the other positions\n    \necho quiet\n\n    If they keyword \necho\n \nis immediately followed by the keyword\n\nquiet\n then comments \nautomatically generated by the \n\necho\n filter are \nsuppressed.\n    \nnumeric value of \necho\n\n    If \nbody_filter\n is a \nnumer\nic filter\n then the \n\necho\n is also a numeric \nfilter whose value at a position is \nthe maximum value of \n\nbody_filter\n attains over all \ntarget positions at which it is \nevaluated. \n\n\n    You can use \nsort\n with \n\necho\n just like with any \nother filter, so long as \n\nbody_filter\n is a \nnumer\nic filter\n, with one limitation: \nthe sort must be in the max direction \n(the default). \nsort min\n  \nis not supported with \n\necho\n.\n\n\n    Therefore, when \nsort\n \nis used with \necho\n, the \n\nsort\n filter finds the \npositions \nsource\n and \n\ntarget\n that maximize the \nvalue of the \nbody_filter\n . \nThe default \necho\n and \n\nsort\n generated PGN \ncomments should indicate which \nsource/target position pair attained \nthis maximum. Example of this usage \ninclude \nzugzwan\ng2.cql\n, \nfatam\norgana.cql\n, \nmovedblackpieceecho.cql\n, and \nunderpromotionecho.cql\n .\n\n\n    \n    \ncomments in echo\n\n    \necho\n will generate \nautomatic comments indicating each \nmatched source position and target \nposition. \necho\n will also \ngenerate a comment indicating the \nlca\n of the source \nposition and target position whenever \nthe \nLCA\n is different from\neach of these. These automatically \ngenerated comments can be removed by \nspecifying the \nquiet\n \noption in the CQL header.\n\n\n    \necho\n comments can \nquickly become unwieldy. It is often \nuseful to sort an \necho\n, \nsince a sort only generates comments \nassociated with its maximum value.\n    \nUseful filters in echo\n\n    You can use any filter you want in\nan echo, but some tend to be \nparticularly useful:\n    \n\n      \n \n:\n \noperator\n      \n \nconsecuti\nvemoves\n\n      \n \n∩\n with\nposition filter arguments\n      \n \nsidetomove\n\n      \n \nlca\n\n      \n \ndistance\n\n      \n \ncomparison of positions\n using \nrelation operators\n    \n\n    \nExamples\n\n    The \necho\n filter is \nused in \ncastle\necho.cql\n, \nchamele\non.cql\n, \nenp\nassantecho.cql\n, \nfatam\norgana.cql\n, \n\nflipverticalecho.cql\n, \nknightpawnforkecho.cql\n, \nmovedblackpieceecho.cql\n, \n\nplatzwechselecho.cql\n, \n\nqueenpawnpinecho.cql\n, \nunderpromotionecho.cql\n, \nwcct7.cql\n, \nzugzwan\ng1.cql\n, and \nzugzwan\ng2.cql\n.\n\n\nWe now will go through in a little \ndetail how CQL finds some studies \nusing the \necho\n filter. \nFirst, we look at a simple zugzwang \nscript.\n\n\n\nA simple \nzugzwang example from Korolkov\n\n    For the simplest example, let&#39;s go\nthrough \nzugzwan\ng1.cql\n. \n\n\n    Let&#39;s go through the CQL code in \n\nzugzwan\ng1.cql\n, and specifically what \nhappens when the CQL file reaches the \nstudy \nKoro\nlkov 1972, USSR team champ. VIII, 1/2 \np.\n. \n\n\nThe CQL file begins with the list of \n\nCQL \nparameters\n which here importantly \ntell CQL to look in the variations:\n\n      cql(variations)\n \n\n\nThe next few filters limit our \nconsideration to \nwin studies\n and\nthe current position to be in the \nmainline\n that\nare \nblack to \nmove\n:\n\n    result 1-0 mainline  btm \n\n\n\nAt this point, the current position is\na black to move mainline position in a\nwin study.\n\n\nIn particular, the current position \nwill match the filters so far at the \nposition after move \n\n4.Ka1\n:\n\n\n\nKorolkov 1972, after 4. \nKa1\n\n\n\n\n\n\n\n\nThis will be a zugzwang position of \nthe kind we are looking for if the \nsame position recurs in the variations\nwith white to move. That is what the \n\necho\n filter looks for:\n\necho(source target){ \n wtm  try  \n source\n∩\ntarget==&lt;\nspan title=&#34;a-h1-8&#34; \nclass=&#34;mathu&#34;&gt;▦} \n\n\n\nThe \necho(source target)\n \nsets the user variable \n\nsource\n to the current \nposition, which is our mainline black \nto move position, that is, the \ndiagrammed position above.\n\n\nThe \necho\n filter then runs\nthrough all the other positions in the\nstudy, setting \ntarget\n to \neach of them, and setting the current \nposition to \ntarget\n. For \neach such position, the filter checks \nif the\n\ntarget\n is a position that\nis \nwtm try\n that is if it \nis a white-to-move position in a \ntry\n. The \n\ntry\n means that in a \ncorrect study without duals, White \nshould not win from this position.\n\n\nSince \ntarget\n equals the \ncurrent position, a filter like \n\nwtm\n is true of the \ncurrent position (i.e., is true) if it\nis true of \ntarget\n.\n\n\nNow for the key part of the \n\necho\n body, we compare the\npositions \nsource\n and \n\ntarget\n:\n\n  source\n∩\ntarget==&lt;\nspan title=&#34;a-h1-8&#34; \nclass=&#34;mathu&#34;&gt;▦\n\n\n\nThis checks that the board positions \nare the same. \n\n\n\nNote that by default the \n\necho\n filter outputs \nseveral automatic comments.\n\n\nThe matching source position, here \nnamed \nsource\n occurs after\nmove \n4.Ka1\n in the \nmainline:\n\n  4.Ka1! source &lt;-- move 5(wtm)[47]\nCQL\n\n\n\n            The \nCQL\n at \nthe end is the default comment output\n            by CQL when the body of \nthe CQL file matches a\n            position. The word \n\nsource\n is taken from the\n            first argument, \n\nsource\n, to the \n\necho\n filter,\n            and indicates that the \n\necho\n body matched a\n            position when the \n\nsource\n equalled this\n            value. The \nmove \n5(wtm)[47]\n represents the\n            position using the \nstandard \ntextu\nal representation of a position\n. \nHere,\n            it means the position with\n\npositionid\n \nequal to\n            47, which occurs in a \nwhite to move position at\n            move 5. At that position, \na corresponding comment\n            is seen:\n\n4...Ka8! target &lt;-- move 4(btm) \nid:47\n            \n            The \nid:47\n \nmeans that the \npositionid\n \nof that\n            position (the position \nafter \n4...Ka8\n) is\n            \n47\n. The \n\ntarget\n means that this \nposition\n            matches a value of \n\ntarget\n in the \n\necho\n\n            filter. The word \n\ntarget\n is taken from the\n            variable that is the \nsecond argument to \necho\n, \nin\n            \necho(source \ntarget)\n. The \nmove \n4(btm)\n indicates\n            the corresponding \n\nsource\n position, namely \nthe\n            \nbtm\n mainline \nposition after move 4. (It must be\n            a mainline position \nbecause there is no bracketed\n            number following it, \nunlike for the \nsource\n\n            position&#39;s comment.\n\n\nOne final comment is worth mentioning.\nThe mainline position after \n\n1...Rd4\n,\n\nKoro\nlkov 1972, after 1...d4\n \n(found\nfrom CQL file: \nzugzwan\ng1.cql\n)\n\n\n\n\n\n\n\n\nis annotated with the comment \n\nLCA\n. This simply means \nthat this position is the \nlca\n or &#34;critical \nposition&#34;. If white plays \n2. \nd:c4!\n here, then white wins, \nreaching the \nsource\n \nposition above with black to move. But\nif white instead plays \n2. \na7+\n then black avoids loss, as \nhe can in some variation reach the \n\ntarget\n position above, \nwith white to move.\n\n\n\nA logical study by \nSalai\n\nNow we look at a slightly more complex\nexample. We are looking for games such\nthat there isa  mainline position \n\nsource\n and a variation \n\ntarget\n which only differ \nin that white has an extra piece in \nthe \ntarget\n. Normally, the\nextra piece would help white, but \nhere, because it occurs only in the \nvariation, we expect it to hurt white.\n\n\nWe also want the game to illustrate \nwhy the missing piece hurts white by a\nsequence of moves that fails only in \nthe variation. What this means will be\nclearer a bit later.\n\n\nThe following study by Salai is an \nexample:\n\n\n\nSalai 2011\n \n(found from CQL\nfile: \nmissingwhitepiece.cql\n)\n\n\n\n\n\n\n\n\nIn this position, the natural \n\n1.Kd7?\n turns out to lose,\nafter the sequence of moves given in \nthe variation.\n\n\nThe winning move is \n\n1.f4!\n. After \n\n1...B:f4\n only now does \nwhite play \nKd7\n. So the \nnatural question: why does inserting \nthe moves \n1.f4 B:f4\n turn \nthe drawing \n1.Kd7\n into \nthe winning \n2.Kd7\n?\n\n\nThe answer lies in the position near \nthe end of the mainline:\n\nSalai 2011, after 10...Kh5\n \n\n(found from CQL file: \nmissingwhitepiece.cql\n)\n\n\n\n\n\n\n\n\nThe above position is reached after \n\n1.f4! B:f4 2. Kd7 .... \n10...Kh5\n. White now wins after \n\n11. f3!\n. But \n11. \nf3!\n is possible only because \n\n1.f4\n vacated the \n\nf3\n square.\n\n\nIf white had instead of \n1. \nf4\n played the immediate \n\n1.Kd7\n and tried the same \nplan, the following position would \nhave been reached.\n\nSalai 2011, after 9...Kh5 \n(variation)\n \n(found from CQL \nfile: \nmissingwhitepiece.cql\n)\n\n\n\n\n\n\n\n\nIn this position, white cannot save a \ntempo with \nf3\n, since \nthere is now a pawn on \n\nf3\n, so white only draws.\n\n\nThe CQL that finds this position (and \npositions like it) is in the file \nmissingwhitepiece.cql\n.\n\n\nIt begins with some boilerplate\n\ncql(result 1-0 variations matchstring \n&#34;&#34;)\n\nThis limits the \nresult\n to white\nwins, searches in \nv\nariations\n, and inhibits printing \nof \nCQL\n at each match, \nwhich clutters up the output somewhat.\n\n\nNow, we want include and \n\necho\n filter. We want the \necho filter to match when \n\nsource\n equals\nthe winning mainline position above \nafter \n10...Kh5\n, and \n\ntarget\n equals the drawing\nvariation after \n9...Kh5\n.\n\n\nThe \nmainline\n. The\n\n  sort &#34;number of identical \nconsecutive moves&#34;\n   echo (source target){\n    try\n\nindicates that the games are to be \nsorted by the value of the \n\necho\n filter. Here, the \nbody of the \necho\n is a \ncompound filter which ends with\n\nconsecutivemoves 15 100 (source \ntarget)\n\n\n\nNow, let us assume in the following \nthat the variable \nsource\n \nhas value equal to the mainline the \nposition after \n10...Kh5\n, \nand the variable \ntarget\n \nhas value equal to the variation \nposition after \n9...Kh5\n. \n\n\n\nNext, the remainder of the \n\necho\n body just checks \nthat \nsource\n and \n\ntarget\n are the same \nexcept for some extra pieces in \n\ntarget\n, which is the \ncurrent position inside the \n\necho\n body.\n\n\nAs in the zugzwang example earlier, we\nfirst check that the \nsidetomove\n \nis the same\nin \nsource\n and \n\ntarget\n:\n\nsidetomove==source:sidetomove\n\n\n\nNext, we set the variable \n\nmismatches\n to the set of \nsquares in which the positions \n\nsource\n and \n\ntarget\n differ, and check \nthat this is nonempty:\n\nmismatches= ~(source&amp;target)\nmismatches&gt;0 \n\n\n\nIn this case, \nmismatches\n \nhas the value \nf3\n, since \nthat that is the only square\non which \nsource\n and \n\ntarget\n have different \ncontents. In the \nsource\n, \nthe mainline, the square \n\nf3\n is empty; but in the \n\ntarget\n the square \n\nf3\n has a white pawn on \nit.\n\n\nThe next line actually checks that the\nonly difference between \n\nsource\n and \n\ntarget\n is that \n\ntarget\n has some extra \nwhite pieces:\n\n mismatches== \n△\n∩\nsource:\n□\n\n\n\nHere, \n△\n is the set of squares on which \nthere is a white piece in\nthe current position, that is on \n\ntarget\n. \n\nsource:\n□\n the set of\nempty squares in \nsource\n. \nThe \n∩\n \ntakes the intersection of\nthese two sets. The only square in \nboth sets is \nf3\n: there is\na white\npiece on \nf3\n in \n\ntarget\n, but \n\nf3\n is empty in \n\nsource\n.\n\n\nHence, the right hand side of the \n\n==\n above is simply \n\nf3\n, which is also the \nvalue of the left side, \n\nmismatches\n.\n\n\nFinally, the \nconsecuti\nvemoves\n filter has value equal to \nthe \nlength of the longest sequence of \nconsecutive moves between the LCA and \n\nsource\n and the LCA and \n\ntarget\n. Here, for \nexample, this length is 16: the 16 \nmoves that are annotated \n\nsource-move[1]\n through \n\nsource-move[16]\n (or \n\ntarget-move[1]\n through \n\ntarget-move[16]\n). The LCA\nof \nsource\n and \n\ntarget\n in this case is \nsimply the initial position: white can\nchoose to go into the mainline with \n\n1.f4!\n or the variation \nwith \n1.Kd7?\n. \n\n\nTherefore, the filter matches."
  },
  {
    "name": "eco",
    "parameters": "implicit search parameter",
    "arguments": "",
    "example": "X=eco",
    "link": "tagqueryfilters.html#eco",
    "description": "ECO\neco\nEncyclopedia of \nChess Openings code"
  },
  {
    "name": "elo",
    "parameters": "whiteblack",
    "arguments": "",
    "example": "elo>2700",
    "link": "elo.html",
    "description": "The \nelo\n filter is a \nnumer\nic filter\n that consists of the \nword \nelo\n  followed by an \noptional color name \n(\nwhite\n or \n\nblack\n)\n  \n    elo \n    elo black \n    elo white\n    \n\n\n\n\n  If a color name (\nwhite\n \nor \nblack\n) is specified, \nthe value ove the \nelo\n \nfilter is the ELO of the specified \nplayer. Otherwise, the value of the \n\nelo\n filter \nis the maximum ELO of the two players.\n\n\n  If the relevant ELO fields are \nmissing or unknown, the filter does \nnot \nmatch\n the\nposition.\n  \nAs illustrated in the sample file \ngameinfo\n.cql\n, \nelo\n works with \n\nflipcolor\n\nand can be used to find wins against a\nplayer with the specified elo:\n  \n  flipcolor\n  {player white &#34;Ivanchuk&#34;\n   elo black&gt;= 2000\n  result 1-0}\n\n  will find games that Ivanchuk wins \n(because \nflipcolor\n \ntransforms both the elo and the \nresult, as they are both enclosed in \n\nbraces\n.\n  \n\n    For example, to sort Carlsen wins \nby opponent&#39;s elo, use:\n    \n     cql(input i.pgn)\n      flipcolor {\n      player white &#34;Carlsen&#34;\n      result 1-0\n      sort &#34;Opponent ELO&#34; elo black \n     }"
  },
  {
    "name": "event",
    "parameters": "implicit search parameter",
    "arguments": "",
    "example": "x=event",
    "link": "tagqueryfilters.html#evententry",
    "description": "Event\nevent\n-event\n\nevent \nname"
  },
  {
    "name": "eventdate",
    "parameters": "implicit search parameter",
    "arguments": "",
    "example": "eventdate~~\"199[4-7]\"",
    "link": "tagqueryfilters.html#eventdate",
    "description": "The \n\neventdate\n filter has the \nsame syntax as \ndate\n but \nretrieves the tag value of the \n\nEventDate\n tag:"
  },
  {
    "name": "false",
    "parameters": "",
    "arguments": "",
    "example": "false",
    "link": "false.html",
    "description": "The \nfalse\n filter is \nalways false. It matches no position:\n\n\n\nExamples\n\nThe \nfalse\n filter is use \nin \npersistent.cql to make sure that this \nfile matches no positions (the only purpose of npersistent.cql is to output summary statistics about the database, not to find games).\n\n  false"
  },
  {
    "name": "fen",
    "parameters": "string",
    "arguments": "",
    "example": "X=fen",
    "link": "fen.html",
    "description": "## FEN Support\n\nFEN stands for **Forsyth-Edwards Notation**. It is a standard syntax for representing individual chess positions. CQL supports FEN via the `fen` filter inside a CQL file and as a command line argument.\n\n### FEN Record Format\n\nA **FEN record** is a sequence of fields separated by spaces. Each field is a sequence of alphanumeric characters.\n\nFor example, the FEN record representing the start position is:\n\n`rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1`\n\n### Extended FEN in CQL\n\nCQL supports an extended version of FEN where piece names can include single-character designators: `A`, `a`, `.` or `_` which mean:\n\n- `A` or `a`: any white or black piece, respectively\n- `.` or `_`: any piece or an empty square\n\nFor example, replacing the first four characters of the initial position FEN:\n\n`Aa._Kbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1`\n\nrepresents any position with a white piece on a8, a black piece on b8, anything or empty on c8, and empty on d8.\n\n---\n\n### `fen` Filter\n\nThe `fen` filter consists of the keyword `fen` optionally followed by a quoted string representing a FEN record.\n\n#### fen without arguments\n\n(New in CQL 6.1) If `fen` is not followed by a quoted string, its value is a string representing the FEN of the current position (halfmove clock and fullmove number treated as 0 and 1 respectively).\n\nThis is mainly used to communicate with external programs or check FEN occurrences. Example usage:\n\n```cql\nmessage (\"Current Fen: \" fen)\nwritefile (\"fenslist.cqo\" fen)\ndictionary D\nD[fen] = \"seen\"\n```\nRetrieving Halfmove Clock and Full Move Number\n\nTo get a FEN including the halfmove clock and full move number, you can define functions like:\n\n```cql\nfunction NHalfMovesSinceZ() {\n  distance(\n    find <-- initial\n         or currentmove ♙♟――\n         or currentmove ×\n  )\n}\n\nfunction EditFen(F) {\n  assert F[-3:] == \"0 1\"  // ensure F comes from fen filter\n  F[-3:] = str(NHalfMovesSinceZ()) + \" \" + movenumber\n  F\n}\n```\n\nUse EditFen(fen) in your code instead of fen if you want this extended FEN.\n\n\n---\n## fen with argument\n\nIf the `fen` is followed by a quoted string, then the `fen` filter matches the current position if the board position (the placement of pieces and empty squares) in the current position is identical to the board position specified by the first field of the FEN record.\n\nThus, to find games with the board position discussed above, just use\n\n```cql\nfen \"Aa._kbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR\"\n```\n\nNote how we left off the last five fields of the FEN record here, although this is optional.\n\n---\n\n### Uses of the FEN filter with an argument\n\n- FEN is supported by most chess GUIs. Sometimes it is quicker to copy the position to a FEN in the GUI, then paste that FEN into CQL rather than specifying the pieces individually.\n- If you care about side to move and castling or en passant rights, specify those separately. (Side to move can be specified using `wtm` and `btm`.)\n- You can test for castling or en passant rights by `move legal castle` and `move legal enpassant`.\n- However, CQL `move legal` disregards any FEN information regarding prior moves pertaining to castling or en passant rights in its assessment of the legality of castling or en passant. This is because such information is frequently incorrect or inadvertently entered.\n\nOn the command line, you can specify a FEN using the `--fen` keyword directly, which lets you quickly search for a position without constructing a new CQL file. Thus,\n\n```bash\ncql -input foo.pgn -fen \"Aa._kbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR\"\n```\nwould match games with the specified position.\n\n---\n\nThe `fen` filter with argument can be flipped and rotated, but **not shifted** (if an attempt to shift a `fen` filter is made, CQL thinks the empty squares need to be shifted too, so nothing matches since some empty squares wind up off the board).\n\n---\n\n### Parsing fens\n\nWhen using fens in CQL, it is frequently necessary to parse a FEN string into its constituents. The following sample function, given a valid fen string as argument, sets the global variables:\n\n`FenPieces`, `FenToMove`, `FenCastle`, `FenEnPassant`, `FenHalfmoveClock`, `FenFullmoveNumber`:\n\n```cql\nfunction ParseFen(Fen){\n   Fen ~~ \"^([^ ]+) ([bw]) ([KQkq]+|-) ([a-h][1-8]|-) (\\\\d+) (\\\\d+)\"\n   FenPieces = \\1\n   FenToMove = if \\2 == \"b\" black else white\n   FenCastle = \\3\n   FenEnPassant = if \\4 == \"-\" [] else makesquare \\4\n   FenHalfmoveClock = int \\5\n   FenFullmoveNumber = int \\6\n}\n```\n\nTo parse the current fen, use\n\n```cql\nParseFen(fen)\n```\nNote that the value of the enpassant record (`FenEnPassant`) taken from the FEN is not the same square as the value of the `enpassantsquare` parameter to `move`. The `enpassantsquare` parameter is the value of the destination square of the **captured** pawn; the FEN en passant record is the destination of the **capturing** pawn.\n"
  },
  {
    "name": "file",
    "parameters": "",
    "arguments": "set",
    "example": "file K",
    "link": "file.html",
    "description": "# `file` Filter\n\nThe **`file`** filter is a **numeric filter** that takes a single **set filter** as its argument.\n\n```cql\nfile a1 ≡ 1\nfile c3 ≡ 3\n```\n\n---\n\n## Description\n\n- If the set of squares represented by its argument contains **exactly one square** `s`,  \n  then the value of the `file` filter is the **numeric value** of the file of `s`.\n- File values are numbered as:\n  - `a` → **1**\n  - `b` → **2**\n  - `c` → **3**\n  - ...\n  - `h` → **8**\n\n- If the set of squares **does not contain exactly one square**, the `file` filter **does not match** the current position.\n\n- The `file` filter is **not affected** by transform filters such as:\n  - `flip`\n  - `rotate90`\n\n---\n\n## Examples in Use\n\nThe `file` filter is used in:\n\n- `averagedistance.cql`\n- `chameleon.cql`\n- `flipverticalecho.cql`\n- `horizontallysymmetric.cql`\n- `platzwechselecho.cql`\n- `platzwechseln2.cql`"
  },
  {
    "name": "find",
    "parameters": "rangeallquiet<--",
    "arguments": "filter",
    "example": "find checkfind all check",
    "link": "find.html",
    "description": "# `find` Filter\n\nThe **`find`** filter is used to search for positions that match a specified **filter**.  \nIt always starts its search from the **current position**.\n\n```cql\nfind check\nx = 1 + find all check\nfind ♖a3\n```\n\n---\n\n## Syntax\n\n### 1. Basic Form\n```cql\nfind filter\n```\n- Matches the current position if some **future position** (including the current one) matches `filter`.\n- If found, that position is returned as the value of `find`.\n- Stops searching when the first matching position is found.\n\nExample:\n```cql\nfind check\n```\nMatches the next position where a check occurs.\n\n---\n\n### 2. Count All Matches\n```cql\nfind all filter\n```\n- Returns the **count** of future positions matching `filter` (including the current position).\n- Matches only if the count is **nonzero**.\n\nExample:\n```cql\nfind all check\n```\nReturns the number of future checks from the current position.\n\n---\n\n### 3. Range of Matches\n```cql\nfind min max filter\n```\n- Matches if the number of future positions matching `filter` is within the range `[min, max]`.\n\nExample:\n```cql\nx = find 0 1000 check\n```\nSets `x` to the number of future positions that are checks.\n\n---\n\n## Searching Backward\n```cql\nfind <-- filter\nfind all <-- filter\n```\n- Searches **backward** in the game tree instead of forward.\n\n⚠ **Note**: Do not confuse `<--` (search direction) with `→` (left attack arrow).\n\n---\n\n## Quiet Mode\n- By default, `find` will comment on found positions.\n- Comments can be suppressed with:\n  - The `quiet` keyword in the CQL header.\n  - Adding `quiet` as a parameter to `find`.\n\nExample:\n```cql\nfind quiet check\n```\n\n---\n\n## Examples in Use\nThe `find` filter is used in:\n- `Qq-rotations-90-degree.cql`\n- `Qq-rotations.cql`\n- `averagedistance.cql`\n- `excelsior-multiple.cql`\n- `excelsior-return.cql`\n- `excelsior-simple.cql`\n- `most-visited-square.cql`\n- `most-visited-square-2.cql`\n- `platzwechseln1.cql`\n- `platzwechseln2.cql`\n- `rook-corners-1.cql`\n- `rook-corners-2.cql`\n- `rook-corners-rotate-with-range.cql`"
  },
  {
    "name": "flip",
    "parameters": "count",
    "arguments": "filter",
    "example": "flip Ad4 attacks k",
    "link": "flip.html",
    "description": "# `flip` (✵) Filter\n\nThe **`flip`** filter (symbol: ✵) is a **transform filter** corresponding to the **8 basic transforms** of a chessboard:\n\n1. **`id`** – Identity  \n2. **`rotate90`** – Counterclockwise rotation about the board center by 90°  \n3. **`rotate180`** – Rotation by 180° about the board center  \n4. **`rotate270`** – Clockwise rotation about the board center by 90°  \n5. **`reflecth`** – Reflection about the horizontal bisector  \n6. **`reflectv`** – Reflection about the vertical bisector  \n7. **`reflecta1h8`** – Reflection about the *a1-h8* diagonal  \n8. **`reflecth1a8`** – Reflection about the *h1-a8* diagonal  \n\nThese transformations are called **dihedral transforms**, as they come from the rigid symmetries of the chessboard.\n\n---\n\n## Syntax\n\n```cql\n✵F\n```\n\n- `F` is any filter.\n- Matches the **current position** if **any transformation** of `F` (by one of the 8 basic transforms) matches.\n- Optional:  \n```cql\n✵count F\n```\nReturns the number of **distinct** matching transformed versions of `F`.\n\n---\n\n## Example\n\nSuppose `F` is:\n\n```cql\n{ ♔a1 ♚h8 }\n```\n\nThis matches a position where the white king is on `a1` and the black king is on `h8`.\n\nApplying `reflecth` yields:\n\n```cql\n{ ♔a8 ♚h1 }\n```\n\nApplying all 8 transforms results in 4 distinct configurations:\n\n```\n{ ♔a1 ♚h8 }\n{ ♔h1 ♚a8 }\n{ ♔a8 ♚h1 }\n{ ♔h8 ♚a1 }\n```\n\nThe filter:\n\n```cql\n✵{ ♔a1 ♚h8 }\n```\n\nMatches if the kings are on **opposite corners** in the current position.\n\n---\n\n## Behavior by Filter Type\n\n### **Set Filter**\nIf `F` is a **set filter**, then `✵F` is also a set filter.  \nIts value is the **union** of all sets produced by each transformed version of `F`.\n\nExample:\n```cql\n✵a1\n```\n→ `[a1, h1, a8, h8]`\n\n---\n\n### **Numeric Filter**\nIf `F` is numeric, then `✵F` is also numeric.  \nIts value is the **maximum** among all transformed versions of `F`.\n\n---\n\n### **Count**\n```cql\n✵count F\n```\nReturns the **number of distinct** matching transformed versions of `F`.\n\nExample:\n```cql\n✵count find { ♕a1 ♛h8 }\n```\nCounts the number of opposite-corner configurations of queens in a game.\n\n---\n\n## Interaction with Directions\n\n`✵` also transforms **direction parameters** and filters.\n\nExample:\n```cql\n✵up♖\n```\nMatches whenever:\n```cql\northogonal♖\n```\nmatches (squares above, below, left, or right of a rook).\n\n---\n\n## Example in Use\n\nThe `✵` filter is used in:\n- `staircase-sort.cql` – finds queen staircase maneuvers by defining a pair of directions and generating all symmetrical variants with `✵`."
  },
  {
    "name": "flipcolor",
    "parameters": "count",
    "arguments": "filter",
    "example": "flipcolor A attacks k",
    "link": "flipcolor.html",
    "description": "## ⬓ (`flipcolor`) — Color Symmetry Operator in CQL\n\n**Purpose:**  \n`⬓F` matches if `F` matches **or** if `F` matches when you swap white ↔ black.\n\n---\n\n### How it works\n\n#### 1. **Match-wise**\n- `⬓F` matches if `F` matches the position **or** if its **color-swapped** version matches.\n- Color-swapping means:\n  - White ↔ Black keywords\n  - Piece colors swapped (`♔` ↔ `♚`, `♙` ↔ `♟`, etc.)\n  - `wtm` ↔ `btm`\n  - `result 1-0` ↔ `result 0-1`\n  - Ranks reflected about the horizontal bisector (`a2` ↔ `a7`, etc.)\n  - `light` ↔ `dark` squares\n\n---\n\n#### 2. **Set-wise**\n- If `F` is a **set filter**, `⬓F` is the **union** of:\n  - The set from `F`\n  - The set from `reversecolor F`\n\nExample:  \n`△→♛` = white pieces attacking a black queen.  \n`⬓△→♛` = pieces (white or black) attacking the enemy queen.\n\n---\n\n#### 3. **Number-wise**\n- If `F` is numeric, `⬓F` = **maximum** of:\n  - The value from `F`\n  - The value from `reversecolor F`\n\nExample:  \n`#♙` = number of white pawns.  \n`⬓#♙` = `max(#♙, #♟)`.\n\n---\n\n#### 4. **Count-wise**\n- `⬓count F` = number of distinct color-variants of `F` that match:\n  - 0 → neither `F` nor `reversecolor F` matches\n  - 1 → exactly one matches\n  - 2 → both match and are distinct\n\nExample:  \n`⬓count △→♛` = 2 if both queens are attacked by the opposite color.\n\n---\n\n### Why it’s useful\nIt’s like saying:  \n> “Do this search, but also try it from the other side’s perspective.”\n\nThis avoids having to write two separate filters for white and black.\n\n---\n\n### Examples\n- `⬓♙a-h2` = white pawns on rank 2 **or** black pawns on rank 7\n- `⬓#♙` = maximum of white pawn count and black pawn count"
  },
  {
    "name": "fliphorizontal",
    "parameters": "count",
    "arguments": "filter",
    "example": "fliphorizontal Ae1 attacks k",
    "link": "fliphorizontal.html",
    "description": "**fliphorizontal** is a transform filter corresponding to the following 2 basic transforms:  \n\n- **id** – the identity  \n- **reflecth** – reflection about the horizontal bisector  \n\n---\n\n**fliphorizontal** is normally called with a single argument filter `F`:\nIt also accepts an optional `count` parameter.  \n\n`fliphorizontal F` matches the current position if any transformation of `F` by one of the two basic transforms above matches the current position. These two transforms are examples of *dihedral transforms*.\n\n---\n\n**Example:**  \nSuppose `F` is the filter `{Ka1 kh8}`, matching a position in which the white king is on **a1** and the black king is on **h8**.  \nIf we transform this filter by **reflecth** we get the new filter `{Ka8 kh1}`.  \n\nThe filters resulting from transforming `{Ka1 kh8}` by all the elements of **fliphorizontal** (i.e., the identity and reflection about the horizontal bisector) are:\n```cql\n{Ka1 kh8} {Ka8 kh1}\n```\nThe filter:\n```cql\nfliphorizontal {Ka1 kh8}\n```\nwill thus match a position if either of these two filters match the position — that is, if the white king is on **a1** or **a8**, and the black king is on the opposite corner.  \n(This can also be done, more efficiently, via: `k==diagonal 7 K[a1,a8]`)\n\n---\n\nIf `F` is a **set filter**, then so is `fliphorizontal F`, in which case its value is the union of the values of each of the sets represented by each transformed version of `F`.\n\n**Example:**\n\n```cql\nfliphorizontal a1\n```\nis the set `[a1,a8]`.\n\n---\n\nIf `F` is a **numeric filter**, then so is `fliphorizontal F`, in which case its value is the maximum of the values of `F` and the value of the reflection of `F` about the horizontal bisector.\n\n---\n\n`fliphorizontal count F` is a numeric filter whose value is the number of distinct matching transformed versions of `F`.  \n\n**Example:**  \nIf the current position is the initial position, then:\n```cql\nfliphorizontal count find {Qa1 qh8}\n```\nis equal to:\n\n- **0** if neither `{Qa1 qh8}` nor `{Qa8 qh1}` occur in the game  \n- **1** if exactly one of these configurations does  \n- **2** if both of them do\n\n---\n\nThe **fliphorizontal** filter also modifies **directions** parameters and filters.\n\n"
  },
  {
    "name": "flipvertical",
    "parameters": "count",
    "arguments": "filter",
    "example": "flipvertical Ae1 attacks k",
    "link": "flipvertical.html",
    "description": "`flipvertical` is a transform filter corresponding to the following **2 basic transforms**:  \n\n- `id`, the identity  \n- `reflectv`: reflection about the vertical bisector  \n\n---\n\n`flipvertical` is normally called with a single argument filter, `F`:\n\n```\nflipvertical F\n```\n\n`flipvertical` also accepts an optional `count` parameter.\n\n`flipvertical F` matches the current position if **any transformation of** `F` by one of the 2 basic transforms above matches the current position.  \nThese two transforms are examples of **dihedral transforms**.\n\n---\n\n**Example:**  \nSuppose `F` is the filter `{Ka1 kh8}`, matching a position in which the white king is on `a1` and the black king is on `h8`.  \nIf we transform this filter by `reflectv` we get the new filter `{Kh1 ka8}`.  \n\nThe filters that result from transforming `{Ka1 kh8}` by all the elements of `flipvertical` (identity + reflection about the vertical bisector) are:\n\n```\n{Ka1 kh8}\n{Kh1 ka8}\n```\n\nThe filter:\n\n```\nflipvertical {Ka1 kh8}\n```\n\nwill thus match a position if **either** of these two filters match the position, i.e., if the white king is on `a1` or `h1` and the black king is on the opposite corner.  \n(This can also be done more efficiently via: `k==diagonal 7 K[a1,h1]`)\n\n---\n\nIf `F` is a **set filter** then so is `flipvertical F`, in which case its value is the **union** of the values of each transformed version of `F`.\n\n**Example:**\n\n```\nflipvertical a1\n```\n\nis the set `[a1,h1]`.\n\n---\n\nIf `F` is a **numeric filter** then so is `flipvertical F`, in which case its value is the **maximum** of the value of `F` and the value of the reflection of `F` about the vertical bisector.\n\n---\n\n`flipvertical count F` is a numeric filter whose value is the **number of distinct matching transformed versions** of `F`.\n\n**Example:**  \nIf the current position is the initial position, then:\n\n```\nflipvertical count find {Qa1 qh8}\n```\n\n- equals **0** if neither `{Qa1 qh8}` nor `{Qh1 qa8}` occur in the game  \n- equals **1** if exactly one of these configurations occurs  \n- equals **2** if both occur\n\n---\n\nThe `flipvertical` filter also modifies **directions** parameters and filters.\n\n**Example:**\n\n```\nflipvertical ray right (R K)\n```\n\nwill match **if and only if**:\n\n```\nray horizontal (R K)\n```\n\nmatches."
  },
  {
    "name": "from",
    "parameters": "",
    "arguments": "",
    "example": "x=from",
    "link": "currentmove.html#fromto",
    "description": "from\n \nand \nto\n under \ncastling"
  },
  {
    "name": "function",
    "parameters": "",
    "arguments": "{filter}",
    "example": "function square(x) {x * x}",
    "link": "function.html",
    "description": "CQL has a primitive function \nfacility. A function filter has the \nfollowing elements in order:\n  \n\n    \nThe keyword \n\nfunction\n\n    \nA \nvariable \nname\n, the name of the function\n    \nAn \nargument list\n, \nwhich is a sequence of variable names \nenclosed in parentheses. These \nvariables are called the \nformal \nparameters\n of the function\n    \nA \ncompound \nfilter\n, called the \nbody\n \nof the function.\n      \n\n\n\n  Examples of functions:\n  \n    function mate_or_stalemate() { \n      mate or stalemate\n    }\n\n\n    function PurePieces(z) {\n      z&amp;[RBNQrbnq]\n    }\n\n\n    function double(x) {\n      2*x\n    }\n\n\n    function sets_smaller(x y){\n     #x&lt;#y\n    }\n\n\n\n\n  \n Function calling\n\n\n\n  A function is called by putting its \n\nactual arguments\n in \nparentheses after the name of the \nfunction. The number of arguments must\nequal the number of formal parameters \nof the function. The \ni&#39;th\n \nformal parameter is said to \n\ncorrespond\n to the \n\ni&#39;th\n actual argument (and \nvice versa).\n\n\n  For example, if the above functions \nare defined, then the following code\n  matches a position that is mate or \nstalemate:\n  \n    mate_or_stalemate()\n\n\n\n\n    The value of a function call is \nwhatever the value of its body is when\n    invoked with the arguments:\n\n\n    \n      comment(&#34;The number of squares \non a chessboard is: &#34;\n              double(#a-d1-8));\n    \n\n\n\n    The code below matches a position \nin which there are more rooks than \nqueens\n    \n      sets_smaller ([Qq] [Rr])\n    \n\n    In the above call, the formal \nparameters of \ndouble\n are \n\nx\n and \ny\n. The\ncorresponding actual arguments are \n\n[Qq]\n and \n\n[Rr]\n respectively.\n\n\n    Invocation of a function is \nperformed as follows:\n    \n\n      \n For each actual argument \n\nz\n of the function call:\n    \n\n      \nIf \nz\n is a variable \nthen the \ncorresponding \nvariable\n of \nz\n is \n\nz\n\n      \nOtherwise, \nz\n is \nassigned to a new, unique variable \n\nZ\n which is called\n          the \ncorresponding \nvariable\n for \nz\n.\n    \n\n      \nThe body of the function is \nmodified as follows: each occurrence \nof a formal parameter \nw\n in \nthe body corresponding to an argument \n\nz\n of the function call is \nrenamed to be the corresponding \nvariable for \nz\n\n      \n The modified body of the \nfunction is evaluated in place of the \nfunction call\n\n    In the case of the call \n\nsets_smaller([Qq] [Rr])\n, \nthe modified body might look like \nthis:\n    \n         {CQL_var_1=[Qq]\n          CQL_var_2=[Rr]\n          {#CQL_var_1&lt;#CQL_var_2}}&lt;\n/pre&gt;\n\n\n  \n\n    Note that as a consequence of \nthese rules:\n    \n\n      \n If a formal parameter is \nassigned a value in the function body,\nand if the corresponding actual \nargument is a variable, then the value\nof the actual argument will be \nchanged.\n     \nIf an actual argument is a \npiece variable, and if the current \nposition in the function body is \nmodified, the value of the \ncorresponding formal parameter will \nreflect the value of the actual \nargument piece variable in that \ncurrent position. However, if the \nactual argument is a set variable, the\nvalue of its corresponding formal \nparameter will not vary according to \nthe current position.\n     \nDirect or indirect function \nrecursion is not allowed (and will \ncrash CQL if attempted).\n     \nThere is no time penalty \nassociated with function invocation.\n       \n\n\n\n    \nNotes on using strings with \nfunctions\n\n    Be careful not to inadvertently \nchange the value of a string parameter\npassed to a function. Consider a \nfunction that changes the first \ncharacter of its string parameter to a\n&#34;a&#34;, and returns the new string\n\n  function ChangeA (z){\n   z[0]=&#34;a&#34;\n   z}\n\n\n\nThus,\n\n  ChangeA(&#34;bfile&#34;)==&#34;afile&#34;\n\n\n\nIf the actual argument to \n\nChangeA\n is a variable, \nthe value of the variable will be \nchanged as well:\n\n   x=&#34;bfile&#34;\n   ChangeA(x)==&#34;afile&#34;\n   x==&#34;afile&#34;\n\n\n\nIf this is unwanted, enclose the \nactual parameter in parentheses or \nbraces:\n\n  x=&#34;bfile&#34;\n  ChangeA((x))==&#34;afile&#34;\n  x==&#34;bfile&#34;\n\nCurrently in CQL, it can be more \nefficient, for large strings, to pass \narguments in variables, since extra \ncopies are avoided.\n\n\nMoreover, in the above, just\n\n  ChangeA(x)\n\n\n\nwould fail to compile. This is because\nthe body of \nChangeA\n \nbecomes\n\n  {x[0]=&#34;a&#34;\n  x}\n\nThe value of the last \nx\n \nis never used, so CQL warns that this \nmight be an error (which in fact is \nreasonable here, since the function is\nwritten as if its value matters but \nthe value is ignored).\n\n\n    \n    \nUsing transforms with \nfunctions\n\n    A transform operator, like \n\nflipcolor\n, does not \naffect the function definition. \nHowever, it does modify the function \n\ncall\n. That&#39;s because function\ncalls textually replace the call with \nthe function body, and that \nreplacement can be transformed like \nany other CQL code.\n\n\n    \nExamples\n\n    The \nfunction\n filter \nis used in \na\nveragedistance.cql\n."
  },
  {
    "name": "gamenumber",
    "parameters": "",
    "arguments": "",
    "example": "gamenumber==1000",
    "link": "gamenumber.html",
    "description": "The `gamenumber` filter consists of the single word:\n\n```\ngamenumber\n```\n\nIt is a **numeric filter** that represents the game number of the game currently being examined.  \n\nThe first game examined is game number **1**, and each subsequent game increases the game number by 1.\n\n**Example:**\n```\ngamenumber == 1\n```\n\n---\n\nThe `gamenumber` filter can be a **CQL parameter**.  \nThe game number can also be specified on the command line using the options `-gamenumber` or `-g`, followed by a range:\n\n**Example:**\n```\ncql -g 1 10 foo.cql\n```"
  },
  {
    "name": "hascomment",
    "parameters": "",
    "arguments": "string",
    "example": "hascomment \"good\"(deprecated)",
    "link": "originalcomment.html#hascomment",
    "description": "Compatibility \nnote: originalcomment versus \nhascomment"
  },
  {
    "name": "idealmate",
    "parameters": "",
    "arguments": "",
    "example": "idealmate",
    "link": "puremate.html#idealmate",
    "description": "idealmate"
  },
  {
    "name": "idealstalemate",
    "parameters": "",
    "arguments": "",
    "example": "idealstalemate",
    "link": "purestalemate.html#idealstalemate",
    "description": "idealstalemate"
  },
  {
    "name": "if",
    "parameters": "",
    "arguments": "testfilterconsequent",
    "example": "if check \"In check\"",
    "link": "if.html",
    "description": "The `if` filter has one of two forms:\n\n```\nif condition\n    consequent\n\nif condition\n    consequent\nelse alternative\n```\n\nEach of `condition`, `consequent`, and `alternative` can be any filter.  \n\n**Example:**\n```\nif ♖ > 2 check\nif △ → ♚ mate else ♕\n```\n\n---\n\n## Meaning of the `if` filter\n\nIf `condition` matches the position, then `consequent` is evaluated in the position.  \n\nIf `condition` does **not** match and `alternative` is present, then `alternative` is evaluated.\n\n---\n\n## The `then` keyword — syntax changes since CQL 6.0\n\nVersions of CQL earlier than 6.1 required the keyword `then` before `consequent`.  \nCQL 6.1 still supports this syntax, but it is now **deprecated**.\n\n**Examples (old syntax):**\n```\nif R > 2 then check\nif A attacks k then mate else Q\n```\n\nEffectively, the `then` keyword is now optional.\n\n---\n\n## When an `if` filter matches a position\n\nAn `if` filter matches a position if **one** of the following is true:\n\n1. `condition` **and** `consequent` both match the position  \n2. `condition` does **not** match the position **and there is no** `alternative`  \n3. `condition` does **not** match the position and `alternative` matches the position\n\n---\n\n**Note:** Point 2 above might be surprising — an `if` filter without an `else` matches a position if the `condition` does **not** match.  \n\nExample:\n```\nif check ♖ ≥ 3\n```\nmatches the current position if **either**:\n- The current position is **not** a check, **or**  \n- The current position **is** a check and there are at least three white rooks in the position\n\n---\n\n## The value associated with an `if` filter\n\nAn `if` filter has an associated **value** if:\n\n- It has both `consequent` and `alternative`\n- It matches the position\n- Its `consequent` and `alternative` are **both**:\n  - numeric filters, **or**\n  - position filters, **or**\n  - set filters\n\nWhen an `if` filter matches a position, its value is the value of its `consequent` or its `alternative`, depending on whether its `condition` matched or failed to match the position."
  },
  {
    "name": "in",
    "parameters": "",
    "arguments": "set/set",
    "example": "R in (A attacks k)",
    "link": "in.html#set",
    "description": "The `in` filter is a **binary infix filter** that takes either **two set filters** or **two string filters** as arguments.  \n\nThe argument on the **left** of the keyword `in` is the *left argument*; the argument on the **right** is the *right argument*:\n\n```\nN in A\n\"h\" in \"hello\"\n```\n\n---\n\n## `in` with set filter arguments\n\nIf the left and right arguments to `in` are set filters, the filter matches the position if the set of squares represented by its left argument is a **subset** of the set of squares represented by its right argument.\n\n**Example:**\n```\nA in {. attacked by a}\n```\nmatches a position in which **every white piece** is attacked by a black piece.  \nThis is equivalent to:\n```\nsquare all z in A\n    z attacked by a\n```\n\n**Note:** The `in` filter with set arguments is rarely used and never needed in CQL — its functionality can be replicated using more fundamental filters like `square all`, set equality, and `∩`.\n\n---\n\n## `in` with string filter arguments\n\nWhen both arguments to `in` are string filters, the filter matches when the **string value** of the left argument is a **substring** of the string value of the right argument.  \n\nThe filter fails to match if **either** its left or right arguments fail to match.\n\n**Example:**\n```\nx = \"zugzwang\"\ny = \"ug\"\nx in y\n```\n\nThe `in` filter **does not** use regular expressions.\n\n---\n\n## Note: `\"in\"` as a filter vs. `\"in\"` as a parameter\n\nThe `in` filter has nothing to do with the `in` parameters used with the filters `piece`, `square`, and `echo`.\n\nFor example, the `in` before the `A` here:\n```\nsquare in A\n```\nis **not** the `in` filter — it’s a **parameter** to the `square` filter.\n\n---\n\n## Use of the `in` filter with a piece variable\n\nUse care when using the `in` filter when the left argument is a **piece variable**.  \nThe value of a piece variable can be empty in the current position (if it was captured), which can cause `in` to **match** incorrectly.\n\n**Example (wrong usage):**\n```\n// Find pawns that eventually promote\npiece x in Pa-h2\nfind x in a-h8   // Wrong! x might be empty (captured)\n```\n\n**Correct usage:**\n```\nfind x & a-h8\n```"
  },
  {
    "name": "in",
    "parameters": "",
    "arguments": "string/string",
    "example": "\"Q\" in fen",
    "link": "in.html",
    "description": "in\n\nThe \nin\n filter is a binary\ninfix \nfilter\n\nthat takes either two \nset \nfilters\n or two \nstring filters\n\nas arguments. The argument on the left\nof the keyword \nin\n is the \n\nleft\n argument; the argument \non the right is the \nright\n \nargument:\n\n  N in A\n  &#34;h&#34; in &#34;hello&#34;\n\n\nin with set filter \narguments\n\n\n\nIt the left and right arguments to \n\nin\n are set filters, the \nfilter matches the position\nif the\nset of squares represented by its left\nargument is a subset of the set of \nsquares represented by its right \nargument. For example, the following \ncode:\n\n  A in {. attacked by a}\n\n\n\nwill match a position in which every \nwhite piece is attacked by a black \npiece. It is equivalent to:\n\n\n\n  square all z in A\n   z attacked by a\n\n\n\nNote: the \nin\n filter with \nset arguments is rarely used and never\nneeded in CQL. Its functionality can \neasily be replicated using more \nfundamental CQL filters, like \nsquare all\n , \nset equality\n (set equality) and \n\n∩\n.\n\nin with string filter \narguments\n\nWhen the left and right arguments to \nthe \nin\n filter are both \nstring filters, the \nin\n \nfilter matches the position when the \nstring value of the left argument is a\nsubstring of the string value of the \nright argument. The filter fails to \nmatch if either its left or right \narguments fails to match:\n\n  x=&#34;zugzwang&#34;\n  y=&#34;ug&#34;\n  x in y\n\n\n\nThe \nin\n filter does not \nuse regular expressions\n\nNote: &#34;in&#34; as a filter \ndistinguished from &#34;in&#34; as a \nparameter\n\nThe \nin\n filter has nothing\nto do with the \nin\n \nparameters that are used with the \nfilters \npiece\n, \nsquare\n and \n\necho\n.\n\n\nThus,  \nthe \nin\n before the \n\nA\n in the examples is not \nrelated to the \nin\n filter.\nThat usage of \nin\n before \nthe \nA\n is instead a \nparameter to the \nsquare\n \nfilter. It is not its own filter.\n\n\n\nUse of the \nin\n filter \nwith a piece variable\n\nUse care when using the \n\nin\n filter with a left \nargument that is a \npiece \nvariable\n. The value of the piece \nvariable can be empty in the current \nposition (if it was captured), which \nmakes the \nin\n filter match\nthe current position. To check if a \npiece variable represents a piece on a\nset of squares, use \n∩\n:\n\n  piece x in Pa-h2 //find pawns that \neventually promote\n   {find x in a-h8 //wrong! x might be\nempty (captured)\n    find x&amp;a-h8 // correct\n  }"
  },
  {
    "name": "indexof",
    "parameters": "",
    "arguments": "stringstring",
    "example": "indexof(\"King\" \"a King\")==2",
    "link": "indexof.html",
    "description": "The \nindexof\n filter \nreturns the index of a string in \nanother string. \n\n\n  \n    indexof (&#34;e&#34; &#34;hello) \n≡\n \n1\n\n\n\n  If \nx\n and \n\ny\n are string \nfilters, then \nindexof \n(\nx\n  \ny\n) \n has \nvalue the index (zero-based) of the \nfirst occurrence of the string \nrepresented by \nx\n\nin the string represented by \n\ny\n. If either \nargument does not match, or if \n\nx\n does not occur\nin \ny\n, then the \nfilter fails to match. This filter \ndoes not use regular expressions:\n  \n    x=&#34;pin&#34;\n    y=&#34;mate&#34;\n    indexof (y x+y) \n≡\n 3\n    indexof (y x) // fails to \nmatch\n\n\n\n  \nindex of group \ncaptures\n\n  To get the index of a group capture \nexpression like \n\\1\n within\nthe target string it matched to,\n  use \ngroup \ncapture index syntax\n, e.g. \n\n\\-1\n . Of course, you can \nstill use\n  \nindexof\n normally to \nfind the location of \n\\1\n \ninside another string. \n  \n    &#34;pinmate&#34;~~&#34;mate&#34;\n    \\-0 \n≡\n 3\n    &#34;mate: 23&#34; ~~ &#34;mate: (\\d+)&#34;\n    \\-0 \n≡\n 0\n    \\-1 \n≡\n 6\n    \\1 in &#34;1234&#34; // matches the \nposition"
  },
  {
    "name": "initial",
    "parameters": "",
    "arguments": "",
    "example": "initial",
    "link": "initial.html",
    "description": "The \ninitial\n \nfilter\n matches \na position if that position is the \n\ninitial position\n, the unique \nposition with no parent.\n\n  initial\n\n\n\nThe initial position itself is the \nvalue of the filter\n\n  position 0\n\n\nExamples\n\nThe \ninitial\n filter is \nused in \nQq-rotations-90-degree.cql\n, \n\nQq-r\notations.cql\n, \na\nveragedistance.cql\n, \nexcelsior-multiple.cql\n, \n\nexcelsior-return.cql\n, \n\nexcelsior-simple.cql\n, \nmost-visited-square.cql\n, \nmost-visited-square-2.cql\n, \nmultiple-discovered-checks.c\nql\n, \npersis\ntent.cql\n, \nro\nok-corners-1.cql\n, \nro\nok-corners-2.cql\n, \nrook-corners-rotate-with\n-range.cql"
  },
  {
    "name": "initialposition",
    "parameters": "",
    "arguments": "",
    "example": "initialposition:check",
    "link": "initialposition.html",
    "description": "The \ninitialposition\n \nfilter has the value of the initial \nposition of the game. It always \nmatches. \n  \n    initialposition\n\n\n\n  \ninitialposition\n is a \nsynonym of \nposition\n \n0\n , the position with \n\npositionid\n of 0, but \nmight be\n be easier to read.\n  Thus\n  \n    \ninitial\n\ninitialposition\n\n  always matches the current position."
  },
  {
    "name": "int",
    "parameters": "",
    "arguments": "string",
    "example": "int \"64\" == 64",
    "link": "int.html",
    "description": "The \nint\n filter takes a \nsingle argument, a string filter. If \nthe string represented by that filter \nconsists of a nonempty sequence of \ndigits, optionally preceded \nby a minus sign, then the value of the\nfilter is the integer represented by \nstring. Otherwise, the \n\nint\n filter fails to \nmatch.\n  \n    int &#34;32&#34; \n≡\n 32\n    int &#34;-2&#34; \n≡\n -2\n    int &#34;xy&#34; // fails to match\n\n\n\n  The \nint\n filter has \nlower precedence than \n+\n:\n\n\n  \n    int &#34;32&#34; + &#34;1&#34; \n≡\n 321 \n// string concatenation, same as\n    int (&#34;32&#34; + &#34;1&#34;) \n    int &#34;32&#34; + 1 \n≡\n 33 \n//arithemic addition, same as\n    (int &#34;32&#34;) + 1\n\n\n\n  \nexamples\n\n  The \nint\n filter is \nmainly used with regular expressions \nto convert sequences of digits to \nintegers. For example, suppose some \ncomments contains strings like &#34;Eval: \n24&#34; in them.\n  We can convert these to integers:\n\n\n\n  Eval = {comment ~~ &#34;Eval: (\\d+)&#34;\n          int \\1}"
  },
  {
    "name": "isbound",
    "parameters": "",
    "arguments": "",
    "example": "isbound Foo",
    "link": "isbound.html",
    "description": "The filters \nisbound\n and\n\nisunbound\n check whether a\nvariable is bound (has a value) or \nnot. Each filter is followed by a \nvariable \nname\n.\n  \n    isbound Foo\n    isunbound Bar\n\n\n\n  The \nisbound\n filter is \ntrue if its argument is the name of a \nbound variable. \n\n\n\n The \n\nisunbound\n filter is true \nif its argument is not the name of a \nbound variable.\n\n\n  These filters can be used so that \nvariable values can be overriden from \nthe command line, particularly in \nconjunction with the \n-assign\n\ncommand line option.\n\n\n  Sometimes they can be useful as \nboolean flags as well."
  },
  {
    "name": "isolatedpawns",
    "parameters": "",
    "arguments": "",
    "example": "isolatedpawns>3",
    "link": "isolatedpawns.html",
    "description": "The `isolatedpawns` filter in a position has a **value** equal to the **set of squares** that contain isolated pawns:\n\n```\nisolatedpawns\n```\n\nThe `isolatedpawns` filter is equivalent to the following filter:\n\n```\nnotransform\n    ♙ ♟ &\n        ~ ⬓\n        ♙ & horizontal 1 vertical 0 7 P\n```"
  },
  {
    "name": "isunbound",
    "parameters": "",
    "arguments": "",
    "example": "isunbound Foo",
    "link": "isbound.html#isunbound",
    "description": "The isunbound\n filter is true \nif its argument is not the name of a \nbound variable."
  },
  {
    "name": "K",
    "parameters": "",
    "arguments": "",
    "example": "K attacks n",
    "link": "piecedesignator.html#K",
    "description": "white king"
  },
  {
    "name": "k",
    "parameters": "",
    "arguments": "",
    "example": "k attacks n",
    "link": "piecedesignator.html#k",
    "description": "black king"
  },
  {
    "name": "lastgamenumber",
    "parameters": "",
    "arguments": "",
    "example": "gamenumber==lastgamenumber",
    "link": "lastgamenumber.html",
    "description": "The \nlastgamenumber\n has \nas value the game number of the last \ngame of the input PGN file that will \nbe searched by CQL. Usually this is \nthe same as the number of games in the\nPGN file, but if the \n-\ngamenumber\n is used on the \ncommand line, or if \n\ngamenumber\n is used in the\nCQL header to denote a range of games \nto search, the value of \n\nlastgamenumber\n might be \nsmaller than the number of games in \nthe file.\n\n\n  The purpose of \n\nlastgamenumber\n is to \nallow for special processing after the\nlast game is evaluated, such as \nprinting dictionaries. (Unfortunately,\nin practice it is cumbersome in CQL to\ndo this sort of thing; we suggest \ncontacting support for assistance if \nyou need to).\n\n\n  \nlastgamenumber\n reads \nthe input game file and uses various \nheuristics to try and guess the last \ngame number of the file; these might \nalways be accurate. This filter is \nexperimental, but if it fails on a \nparticular \npgn\n file, \nplease let us know.\n  \nexample\n\n\n  cql(input hhdbvi.pgn)\n  initial\n  if gamenumber==lastgamenumber\n   message lastgamenumber\n\nwill output \n93839\n when \nthis game number is reached, which is\nthe number of games in version 6 of \nthe Heijden database.\n\n\nHowever, if this CQL file were invoked\nwith\n\ncql -gamenumber 1 10 \n\nfilename.cql\n\nthen \n10\n would be output."
  },
  {
    "name": "lca",
    "parameters": "",
    "arguments": "(positionposition)",
    "example": "lca(source target)",
    "link": "lca.html",
    "description": "The `lca` filter takes two arguments enclosed in parentheses.  \nEach argument is a **position filter**.  \n\nThe **value** of the `lca` filter is the position that is the **latest common ancestor** of the two positions.\n\n**Syntax:**\n```\nlca(x, y)\n```\n\n---\n\n## Definition\n\nSuppose `x` and `y` are two positions.\n\n### Generalized ancestor\nA position `x` is a **generalized ancestor** of position `y` if **either**:\n- `x == y`, or\n- `x` is an ancestor of `y`.\n\n---\n\n### Latest common ancestor (LCA)\nThe position `L` is the **latest common ancestor** of `x` and `y` if:\n\n1. `L` is a generalized ancestor of both `x` and `y`.\n2. For any position `z` that is also a generalized ancestor of both `x` and `y`,  \n   the ply value of `L` is greater than the ply value of `z`.\n\n---\n\nAny two positions always have a **unique** latest common ancestor (LCA).\n\nSpecial cases:\n- If `x == y`, then the LCA of `x` and `y` is `x`.\n- If `x` is an ancestor of `y`, then the LCA is `x`.\n\n---\n\n## Interesting case\n\nWhen `x` and `y` are **distinct** and **neither** is an ancestor of the other,  \ntheir LCA is like a decision point — the latest point in the game where one side can definitively avoid either one of them.\n\n**Example scenario:**\n- Let `L` be a white-to-move position.\n- From `L`, White can make two moves: `M1` and `M2`.\n- If White chooses `M1`, the game **can** reach `x` but **cannot** reach `y`.\n- If White chooses `M2`, the game **can** reach `y` but **cannot** reach `x`.\n\nIt’s up to White to choose which line to follow.\n\n---\n\n## Uses\n\nThe latest common ancestor is useful for understanding studies involving **echoes** or more general logical studies.  \nIt identifies the “key” move that determines whether the game reaches one of a pair of related positions.  \n\nThe LCA position is commented by default in the `echo` filter, except when it is trivial (i.e., one position is an ancestor of the other).\n\n---\n\n## Examples\n\nThe `lca` filter is used in:\n- `fatamorgana.cql`\n- `queenpawnpinecho.cql`\n- `underpromotionecho.cql`"
  },
  {
    "name": "legal",
    "parameters": "",
    "arguments": "――filter",
    "example": "legal ♔――a-h4",
    "link": "legal.html",
    "description": "The `legal` filter must be followed by a single **dash filter** ( `--` ), the **argument**:\n\n```\nlegal --(o-o)\nlegal --\nlegal ♖--\n```\n\n---\n\n## Argument rules\nThe argument dash filter must have **either**:\n- No specified target, **or**\n- A single target filter that is one of:\n  - `o-o`\n  - `o-o-o`\n  - `castle`\n  - `enpassant`\n\n---\n\n## Meaning\nThe `legal` filter matches the current position if there is a **legal move** matching the argument dash filter.  \nThe move need **not** be present in the PGN file.\n\n---\n\n## `pseudolegal`\n\nThe `pseudolegal` filter has exactly the same syntax as `legal`, except that the keyword `legal` is replaced with `pseudolegal`.\n\nIts meaning is the same as `legal` **except** that **pseudolegal moves** (moves that may leave the moving side in check) are also considered.\n\n**Example:**\n```\npseudolegal ♖--\n```"
  },
  {
    "name": "left",
    "parameters": "range",
    "arguments": "set",
    "example": "left P",
    "link": "direction.html#leftfilter",
    "description": "left"
  },
  {
    "name": "pseudolegal",
    "parameters": "",
    "arguments": "――filter",
    "example": "pseudolegal♔――a-h4",
    "link": "legal.html#pseudolegal",
    "description": "pseudolegal"
  },
  {
    "name": "light",
    "parameters": "",
    "arguments": "set",
    "example": "light B==2",
    "link": "light.html",
    "description": "The `light` filter takes a **single set filter** as an argument.  \nIts value is the set of **light squares** that are in the set of squares represented by that argument.\n\n---\n\n**Example:**  \nTo find positions with more than one light-squared white bishop:\n```\nlight ♗ > 1\n```\n\n---\n\n## Examples of use\n\nThe `light` filter is used in `chameleon.cql` (see the `dark` filter documentation for more discussion).\n\nThe CQL code in `allsamecolor.cql` can be used to find positions in which all pieces (at least 10) are on the same color square.\n\n**Example source:**  \nA. Troitzky, 1910 (found using `allsamecolor.cql`)\n\n---\n\nIn `allsamecolor.cql`, the line:\n```\nlight ◭ == ◭\n```\nis used to check that the set of light pieces is equal to the set of pieces —  \nwhich means **all pieces are on light squares**.\n\nThe `✵` preceding this turns it into:\n```\nlight ◭ == ◭\nor\ndark  ◭ == ◭\n```\nbecause when the board is reflected, light squares become dark squares.  \n\nThis filter as a whole matches a position in which **all pieces are on the same color squares**."
  },
  {
    "name": "local",
    "parameters": "",
    "arguments": "dictionary",
    "example": "local dictionary D",
    "link": "dictionary.html#local",
    "description": "local (non-persistent) \ndictionaries"
  },
  {
    "name": "loop",
    "parameters": "",
    "arguments": "filter",
    "example": "loop {child(i) i+=1}",
    "link": "loop.html",
    "description": "The `loop` filter takes a **single filter** `body` as an argument:\n\n```\nloop body\n```\n\n---\n\n## Meaning\nThe `loop` filter evaluates `body` repeatedly until `body` is **false**.  \n\nThe `loop` filter matches the position if the `body` was **ever true** —  \nthat is, if `body` was evaluated **more than once**.\n\n---\n\n## Notes\nThe `loop` filter is rarely needed; it is used only in certain specialized situations.\n\n---\n\n## Example usage\nThe `loop` filter is used in:\n- `serialpin.cql`"
  },
  {
    "name": "lowercase",
    "parameters": "",
    "arguments": "string",
    "example": "lowercase \"Tal\"==\"tal\"",
    "link": "caseconversion.html#lowercase",
    "description": "lowercase"
  },
  {
    "name": "mainline",
    "parameters": "",
    "arguments": "",
    "example": "mainline",
    "link": "mainline.html",
    "description": "The `mainline` filter matches a position if the **position depth** is `0` — that is, if it is a **mainline** position.\n\n```\nmainline\n```\n\n---\n\n## Default behavior\nBy default, all positions considered by CQL are mainline positions, so `mainline` is always **true**.  \n\nIf CQL has **variations** set in the CQL header, or was invoked with the `-variations` option, then some positions might **not** be mainline positions.\n\n---\n\n## Examples of use\nThe `mainline` filter is often used with the `echo` filter to distinguish the **main theme idea** from a fail in a variation.\n\nExample CQL files:\n- `knightpawnforkecho.cql`\n- `queenpawnpinecho.cql`\n- `underpromotionecho.cql`\n- `wurzburg-plachutta.cql`\n- `zugzwang1.cql`\n- `zugzwang2.cql`"
  },
  {
    "name": "makesquare",
    "parameters": "",
    "arguments": "(numbernumber)",
    "example": "makesquare(File Rank)",
    "link": "makesquare.html",
    "description": "The `makesquare` filter creates a square from either a **file and a rank** or from a **string**:\n\n```\nmakesquare (1 4) ≡ a4\nmakesquare \"b3\"  ≡ b3\n```\n\n---\n\n## **file** and **rank** argument to `makesquare`\n\nIn the first form:\n```\nmakesquare (file rank)\n```\n- **file**: a numeric filter whose value represents a file on the chessboard  \n  (`a` = 1, `b` = 2, etc.)\n- **rank**: a numeric filter whose value is a rank on the chessboard (1–8)\n\nThe `makesquare` filter represents the square whose file and rank are equal to its arguments.  \n\nIf **either** argument does not match the position or is not between `1` and `8`, then `makesquare` does **not** match.\n\n**Example:**\n```\nmakesquare (2 4)   // b4\nb4 == makesquare (2 8)   // Matches any position\n```\n\nTechnically, `makesquare` is a **set filter** representing a set with exactly one square (unless either argument is invalid, in which case it’s the empty set).\n\n---\n\n## String argument to `makesquare`\n\nIn the second form:\n```\nmakesquare \"a3\"\nmakesquare \"a\" + \"3\"\n```\n\n- The string must denote a single square.\n- Precedence: `makesquare` has lower precedence than string concatenation.\n\nIf the string does not represent a valid square, the filter does not match.\n\nThis form is mainly for convenience (e.g., parsing PGN fragments, moves, or the en passant field of a FEN).\n\nIf `x` is the string argument to `makesquare`:\n```\nmakesquare x\n≡\n{ #x == 2\n  makesquare(\n    ascii x[0] - ascii \"a\" + 1,\n    ascii x[1] - ascii \"1\"\n  )\n}\n```\n\n---\n\n## Notes\n\n- Order of arguments: **file precedes rank** (even though we say “rank and file” in English).\n- The `makesquare` filter itself is not affected by transforms like `flip` or `flipcolor`, but its arguments are.\n\n**Examples:**\n```\n{flip makesquare \"b4\"}      == b4\n{flip makesquare (2 4)}     == b4\n{flip makesquare b4}        == [d2,e2,b4,g4,b5,g5,d7,e7]\n```\nNote:  \nA string literal `\"b4\"` is **not** affected by transforms,  \nbut the square `b4` (as an argument to `str`) **is** affected.\n\n---\n\n## Examples of use\n\nThe `makesquare` filter is used in:\n- `flipverticalecho.cql`\n- `horizontallysymmetric.cql`"
  },
  {
    "name": "mate",
    "parameters": "",
    "arguments": "",
    "example": "mate",
    "link": "mate.html",
    "description": "## mate\nThe **`mate`** filter matches a position in which one side has been checkmated:\n\n```\nmate\n```\n\n---\n\n## Examples\n\nA sample mirror mate is from an Arestov study, found in the file:\n\n```\nmirrormate.cql\n```\n\n**Example:**\n> Arestov 2013, after 10. h8=N#"
  },
  {
    "name": "max",
    "parameters": "",
    "arguments": "(numbernumber)",
    "example": "max(#R #Q)",
    "link": "max.html",
    "description": "## `max`\nThe **`max`** filter takes two or more **numeric** or **string** arguments, enclosed in parentheses.  \nIt returns the **maximum** of the arguments.\n\n### Syntax\n```cql\nx = max(#Q #R #B)\ny = max(\"pin\" \"mate\")\n```\n\nIn the string example above:  \n```\ny ≡ \"pin\"\n```\n(`\"pin\"` is greater than `\"mate\"` in lexicographic order.)\n\n---\n\n## Matching behavior\nThe `max` filter matches a position if **at least one** of its arguments matches the position.\n\n---\n\n## Examples\nThe `max` filter is used in:\n\n- `queenpawnpinecho.cql`\n\nExample from that file:\n```cql\nL = lca(source target)\nmax(distance(source L) distance(target L)) >= 4\n```\nThis ensures that either the position named `source` or the position named `target`  \nis a `distance` of **at least 4** from their **latest common ancestor**."
  },
  {
    "name": "message",
    "parameters": "message quiet",
    "arguments": "(filter...)",
    "example": "message(\"x is \" x)",
    "link": "message.html",
    "description": "## `message` Filter\n\nThe **`message`** filter has the same syntax as the [`comment`](#comment-filter) filter,  \nexcept that the keyword `comment` is replaced by `message`.\n\n---\n\n### Syntax\n```cql\nmessage [\"quiet\"] ( argument1 argument2 ... )\n```\n- **`quiet`** *(optional)* — suppresses move/game prefix information.  \n- **Arguments** — any filters; if there is only one argument, parentheses may be omitted.\n\n---\n\n### Examples\n```cql\nmessage (\"The value of x is: \" x)\nmessage (\"The number of black pieces is: \" #▲)\nmessage (\"The checking pieces are: \" △ → ♚)\nmessage (\"The initial position is: \" position 0)\n```\n\nWith `quiet`:\n```cql\nmessage quiet (\"Fen: \" fen)\n```\n\n---\n\n### Behavior\n- Converts arguments to a string (same as `comment`), but:\n  - Instead of adding an annotation to the PGN file, it **prints** the string to **standard output**.\n  - The output is prefixed with:\n    - Current **move number**\n    - **Side to move**\n    - **Game number**\n    - *(If in a variation)* — `positionid` of the current position\n\n---\n\n### Use cases\n- **Debugging** CQL queries.\n- Seeing intermediate values while filtering.\n- Quickly diagnosing why a game isn’t matched.\n\n> ⚠️ **Tip:** When debugging large databases, narrow down to a single game (or a small file)  \n> and use `--gamenumber` to run CQL only on that game, to avoid excessive output."
  },
  {
    "name": "min",
    "parameters": "",
    "arguments": "(numbernumber)",
    "example": "min(#R #Q)",
    "link": "min.html",
    "description": "# The `min` Filter\n\nThe `min` filter takes **two or more** numeric or string arguments enclosed in parentheses. It returns the minimum of the arguments.\n\n## Examples\nx = min(#♕ #♖)  \ny = min(\"pin\" \"mate\")  \ny ≡ \"mate\"\n\n## Matching Behavior\nThe `min` filter matches a position if **at least one** of its arguments matches the position.\n\n## Important Note\nThe `min` filter should **not** be confused with the `min` parameter to `sort`. They are entirely distinct."
  },
  {
    "name": "modelmate",
    "parameters": "",
    "arguments": "",
    "example": "modelmate",
    "link": "puremate.html#modelmate",
    "description": "modelmate"
  },
  {
    "name": "modelstalemate",
    "parameters": "",
    "arguments": "",
    "example": "modelstalemate",
    "link": "purestalemate.html#modelstalemate",
    "description": "modelstalemate"
  },
  {
    "name": "movenumber",
    "parameters": "",
    "arguments": "",
    "example": "movenumber>100",
    "link": "movenumber.html",
    "description": "The \nmovenumber\n filter is \na \nnumer\nic filter\n that returns the move \nnumber of the \ncurrentpos\nition\n.\nExample:\n\n  movenumber&gt;5"
  },
  {
    "name": "N",
    "parameters": "",
    "arguments": "",
    "example": "N==2",
    "link": "piecedesignator.html#N",
    "description": "white knight"
  },
  {
    "name": "n",
    "parameters": "",
    "arguments": "",
    "example": "n==2",
    "link": "piecedesignator.html#n",
    "description": "black knight"
  },
  {
    "name": "northeast",
    "parameters": "range",
    "arguments": "set",
    "example": "northeast P",
    "link": "direction.html#northeastfilter",
    "description": "northeast"
  },
  {
    "name": "northwest",
    "parameters": "range",
    "arguments": "set",
    "example": "northwest P",
    "link": "direction.html#northwestfilter",
    "description": "northwest"
  },
  {
    "name": "not",
    "parameters": "",
    "arguments": "filter",
    "example": "not mate",
    "link": "not.html",
    "description": "The \nnot\n filter takes a \nsingle filter as argument. It matches \na position\n  exactly when this argument does not \nmatch the position. For example,\n  \nnot check\n\n  matches a position in which neither \nside is in check."
  },
  {
    "name": "notransform",
    "parameters": "",
    "arguments": "filter",
    "example": "notransform a4",
    "link": "notransform.html",
    "description": "The \nnotransform\n filter \ntakes one argument, a filter \n\nF\n:\n\n  notransform a4\n  notransform player white \n&#34;Kasparov&#34;\n\n\n\nThe value of \nnotransform \n\nF\n in the current \nposition is the same as the value of \n\nF\n in the current\nposition.\n\n\nIf \nT\n is a \ntransform filter, such as \n✵\n, \nshift\n and so on,\nthen the value of\n\n\n\n  \nT\n notransform \nF\n \n\n\n\n\nis the same as the value of\n\n  notransform \nF\n\n\n\nIn other words, \nnotransform\n nullifies the effect of any \nenclosing transform.\n\n\nThe \nnotransform\n filter is primarily useful in \ncertain functions and also for \ndebugging. For example, the \npassedpawns\n filter is defined internally as:\n\n notransform\n  \n⬓\n{\n   \n♙\n&amp;~\ndown horizontal 0 1 \n♟\n}\n\n\n\nThis ensures that\n\n  rotate90 passedpawns \n≡\n \npassedpawns\n\n\n\nOtherwise, the \nrotate90\n \nwould modify the \ndown\n and\n\nhorizontal\n direction \nfilters and odd results would obtain. \nNote that the \n⬓\n transform inside the \n\nnotransform\n filter \noperates as usual."
  },
  {
    "name": "nullmove",
    "parameters": "",
    "arguments": "",
    "example": "nullmove",
    "link": "currentmove.html#nullmove",
    "description": "current move is a null move"
  },
  {
    "name": "o-o",
    "parameters": "",
    "arguments": "",
    "example": "o-o",
    "link": "currentmove.html#oo",
    "description": "kingside castle"
  },
  {
    "name": "o-o-o",
    "parameters": "",
    "arguments": "",
    "example": "o-o-o",
    "link": "currentmove.html#ooo",
    "description": "queenside castle"
  },
  {
    "name": "or",
    "parameters": "",
    "arguments": "filter/filter",
    "example": "check or stalemate",
    "link": "or.html",
    "description": "An \nor\n \nfilter\n has the \nform\n  \n    \nleft\n or \n\nright\n\n  where \nleft\n and \n\nright\n are filters. It matches\nthe position if either \nleft\n \nmatches the position or \nright\n\nmatches the position.\n  For example, \n  \n    check or \n♖\na3\n  \n\n    is true in a position if either \none side is in check in the position \nor if a white rook is on \n\na3\n or both.\n\n\n    If \nleft\n matches the \nposition, then \nright\n is not \nevaluated.\n\n\n  \nExamples\n\n  The \nor\n filter is used \nin several \nexamples\n such\nas \ncastle\necho.cql\n, \nchamele\non.cql\n, and others."
  },
  {
    "name": "originalcomment",
    "parameters": "",
    "arguments": "string",
    "example": "originalcomment \"good\"",
    "link": "originalcomment.html",
    "description": "The \noriginalcomment\n filter has a string value equal to the comment \nappearing in the input file at the \ncurrent position. If the current \nposition has no comment, the originalcomment\n filter \ndoes not match.\nx=originalcomment\n    originalcomment ~~ &#34;Eval: (\\d+)&#34;\n    &#34;bad&#34; in originalcomment\n\n\n\n  By the phrase &#34;a comment at a \nposition&#34; in CQL, we mean the comment \nin the PGN file that is associated \nwith the move leading to that \nposition. A comment to the initial \nposition is not associated with a \nmove, but appears before the first \nmove in the PGN file for the game.\n\n\n  \nCompatibility \nnote: originalcomment versus \nhascomment\n\n  Prior to CQL 6.1, the filter \n\nhascomment\n was used \ninstead of \n\noriginalcomment\n. The \n\nhascomment\n filter was \njust like \noriginalcomment\n\nbut required an argument.\n  \n  \nhascomment\n is now only \nsynonym for \n\noriginalcomment\n. \n\nhascomment\n is \nback-compatible with CQL version 6.0: \nexisting CQL 6.0 files will work \nunchanged as to \n\nhascomment\n.\n \n  \noptional string \nliteral argument to \noriginalcomment\n\n  If \noriginalcomment\n is \nimmediately followed by a string \nliteral, then:\n  \n\n    \n\n      If the current position has no \ncomment, the filter does not match.\n      \n\n    If the string literal represents a\n\nNAG\n, then the filter matches when the \ndesignated\n    NAG appeared\n      \nOtherwise, the string \nliteral is treated as an \nimplicit \nsearch\n: the original comment\n    to the current position is \nsearched for that string literal.\n  \n\n  For example, suppose the PGN file \ncontains:\n  \n    1. e4 {weakening f2} \n$6\n\n  Then the following filters would \neach match the position following \nWhite&#39;s move 1:\n  \n    originalcomment &#34;kenin&#34;\n    originalcomment &#34;$6&#34;\n    originalcomment &#34;?!&#34;\n    &#34;kening&#34; in originalcomment\n    originalcomment ~~ &#34;f\\d&#34;\n\n\n   \n\n\n  \nNumeric Annotation \nGlyphs (NAGs)\n\n  The PGN specification allows moves \nto be annotated with &#34;numeric \nannotation glyphs&#34;, or \n\nNAGs\n.\n These take the form of \n\n$\n immediately \nfollowed by a positive integer smaller\nthan \n256\n, such as \n\n$2\n or \n\n$5\n.\n\n\n  If the argument to \n\noriginalcomment\n consists \nof the character \n$\n\nimmediately followed by one or more \ndigits, then \n\noriginalcomment\n searches \nfor the corresponding NAG.\n\n\n  If the argument to \n\noriginalcomment\n is equal \nto the string literal equivalent of a \nNAG value listed in the following \ntable, then \n\noriginalcomment\n searches \nfor the corresponding NAG:\n&lt;\n/tr&gt;\n  \n\n  \nchess \nrepresentation\nCQL \nrepresentation\nNAG \nnumber\n\n  \n!\n!\n1\n\n  \n?\n?\n2\n\n  \n!!\n!!\n3\n\n\n\n  \n??\n??\n4\n\n\n\n  \n!?\n!?\n5\n\n\n\n  \n?!\n?!\n6\n\n\n\n  \n=\n=\n10\n⩲\n+/=\n14\n\n  \n⩱\n=/+\n15\n\n  \n±\n+/-\n1\n6\n\n  \n∓\n-/+\n17\n\n  \n+−\n+-\n\n18\n\n  \n−+\n-+\n\n19\n\n\n\n\n\nFor example,\n\n  originalcomment &#34;?&#34;\n\nwill match a position whose preceding \nmove is annotated with the NAG of 2. \nIt has the\nidentical effect to\n\n  originalcomment &#34;$2&#34;\n\n\n\nLikewise,\n\n\n\n  originalcomment &#34;+/=&#34;\n\nwill match a position whose preceding \nmove is annotated with the NAG of 14, \nand is equivalent to\n\n  originalcomment &#34;$14&#34; \n\n\n\n \nLimitation:\nmultiple comments to the same \nmove\n\n CQL does not support multiple \ncomments to the same move (or multiple\ncomments before the first move)\n within a PGN file."
  },
  {
    "name": "P",
    "parameters": "",
    "arguments": "",
    "example": "P==2",
    "link": "piecedesignator.html#P",
    "description": "white pawn"
  },
  {
    "name": "p",
    "parameters": "",
    "arguments": "",
    "example": "p==2",
    "link": "piecedesignator.html#p",
    "description": "black pawn"
  },
  {
    "name": "parent",
    "parameters": "",
    "arguments": "",
    "example": "parent:check",
    "link": "parent.html",
    "description": "The \nparent\n \nfilter\n returns \nthe \nparent\n\nof the \ncurrentpos\nition\n. If the current position is \n\ninitial \nposition\n,\nthen the \nparent\n filter \ndoes not match.\n\n\n\n  x=parent"
  },
  {
    "name": "passedpawns",
    "parameters": "",
    "arguments": "",
    "example": "passedpawns>= 6",
    "link": "passedpawns.html",
    "description": "## `passedpawns` Filter\n\nThe **`passedpawns`** filter has a **value** equal to the set of squares containing a **passed pawn**.\n\n---\n\n### Syntax\n```cql\npassedpawns\n```\n\n---\n\n### Definition\nA *passed pawn* is a pawn that has no opposing pawns ahead of it on the same file or adjacent files.\n\nIn CQL, the `passedpawns` filter is equivalent to:\n```cql\nnotransform\n⬓ {\n    ♙ & ~ down horizontal 0 1 ♟\n}\n```\nHere:\n- **`♙`** — white pawns  \n- **`♟`** — black pawns  \n- **`down`** — squares in front of a pawn (toward promotion)  \n- **`horizontal 0 1`** — same file and adjacent files\n\n---\n\n### Example\n```cql\npassedpawns & ♙    // All white passed pawns\n#(passedpawns) > 1 // More than one passed pawn in position\n```\n\n---\n\n### Notes\n- Matches **both** white and black passed pawns by default.  \n- Can be combined with color filters (`♙` or `♟`) to select passed pawns for a specific side.  \n- Useful in endgame studies, pawn structure analysis, and thematic searches."
  },
  {
    "name": "path",
    "parameters": "primary focus(or◎) max verbose keepallbest title piecepath quiet nestban firstmatch lastposition",
    "arguments": "various",
    "example": "path -- check +",
    "link": "path.html",
    "description": "# ⊢ (or `path`)\n\nThe **⊢** filter comprises the **⊢** symbol followed by **⊢** parameters followed by one or more **⊢** constituents.  \nThe **⊢** symbol may be replaced with the keyword `path`.  \nThe **⊢** symbol is typically called a *\"turnstile\"*, although that term has no special significance in CQL.\n\n---\n\n## Overview\n\nLoosely speaking, the **⊢** filter matches a position if its constituents describe, in order, a sequence of moves starting from the current position.\n\nFor example:\n\n```\n⊢\n  ♗×♟h7 check\n  ♚×h7\n  ♘――g5 check\n```\n\nThis filter matches a Greek gift sacrifice:\n\n- White sacrifices their bishop for Black's h7 pawn with check.\n- Black recaptures with the ♚.\n- White checks with the ♘ on g5.\n\nThis filter has **no parameters** and **five constituents**:\n\n1. `♗×♟h7`\n2. `check`\n3. `♚×h7`\n4. `♘――g5`\n5. `check`\n\n---\n\n## Terminology\n\n- **Path** — A sequence of consecutive moves appearing in the game tree (PGN file).\n- **Matching path** — A path that satisfies the constraints of a specific **⊢** filter.\n- **Start position** — The position when the filter is evaluated.\n- **Head** — The position from which a given move is made.\n- **Tail** — The position resulting from making that move.\n\nThe **⊢** filter matches **moves**, not positions. For example, it returns the number of moves in its matching path, not the number of positions.\n\n---\n\n## ⊢ Parameters\n\nParameters control:\n\n- Which moves are considered.\n- What value is returned.\n- When a path is considered a match.\n\nBy default, **⊢** will find the **longest matching path** and return its length.\n\n| Parameter     | Type / Argument | Description |\n|---------------|----------------|-------------|\n| `primary`     | –              | Only consider primary moves |\n| `◎` (focus)   | set filter     | Only consider moves by specified pieces |\n| `◎ capture`  | set filter     | Only consider moves by, or capturing, specified pieces |\n| `max`         | numeric filter | Maximize value of the given filter at the tail of the last move |\n| `verbose`     | –              | Annotate each move of the path |\n| `keepallbest` | –              | Retain comments for each matching path |\n| `title`       | string literal | Title when `verbose` is used |\n| `piecepath`   | –              | When `◎` is used, annotate matched path with sequence of squares for each focused piece |\n| `quiet`       | –              | Suppress auto-generated comments |\n| `nestban`     | –              | Skip if the start position already appears in another matched path |\n| `firstmatch`  | –              | Stop after the first matching path |\n| `lastposition`| –              | Return the tail of the last move in the path |\n\n---\n\n## ⊢ Constituents\n\nThe **body** of a **⊢** filter consists of one or more **constituents**.\n\nA constituent can be:\n\n- **Dash constituent** — An ordinary `――` or `×` filter without a target filter.\n- **Filter constituent** — An ordinary filter.\n- **Chain constituent** — One or more constituents enclosed in parentheses `( ... )`.\n- **Repetition constituent**:\n  - `*` — Zero or more repetitions.\n  - `+` — One or more repetitions.\n  - `?` — Zero or one repetition.\n  - `{n}`, `{m,n}` — Exact or ranged repetition.\n\n---\n\n## Matching with Simple Constituents\n\nLet path **X** = moves `X1, X2, ..., Xn`  \nLet **Y** = constituents `Y1, ..., Yk`\n\nWe say **X matches Y** if:\n\n1. Both Y and X are empty.\n2. `Y1` is a filter constituent that matches the **current position**, and `X` matches `Y'` (rest of Y).\n3. `Y1` is a dash constituent that matches move `X1`, and `Y'` matches `X'` when the position is updated to the tail of `X1`.\n\n---\n\n### Example\n\nIf the game starts:\n\n```\n1. e4 e5 2. ♘f3\n```\n\nFilter:\n\n```\n⊢\n  ♙――e4 not check\n  ♟――□\n  ――\n  ♗→d3\n```\n\nMatches because:\n\n- `♙――e4` matches `e4`.\n- `not check` matches the position after `e4`.\n- `♟――□` matches `e5`.\n- `――` matches `♘f3`.\n- `♗→d3` matches the position after `♘f3`.\n\nValue returned: **3 moves**.\n\n---\n\n## Matching the Chain Constituent\n\nA **simple chain constituent**:\n\n```\n(Y1 ... Yn)\n```\n\nmatches exactly like removing parentheses and matching `Y1 ... Yn` in order.\n\nExample:\n\n```\n⊢\n  ♙――e4 not check\n  (♟――□ ―― ♗→d3)\n```\n\nThis is equivalent to the earlier example, just grouped into a single chain.\n\n---\n\n## Matching Repetition Constituents\n\nSyntax:\n\n```\nD F R\n```\n\nWhere:\n\n- `D` = dash filter\n- `F` = filter constituents (optional)\n- `R` = repetition signal (`*`, `+`, `?`, `{n}`, `{m,n}`)\n\nExample:\n\n```\n♕♛―― check +\n```\n\nMatches:\n\n- `♕♛―― check`\n- `♕♛―― check  ♕♛―― check`\n- `♕♛―― check  ♕♛―― check  ♕♛―― check`\n- …and so on (at least once).\n\n---\n\n## Parsing Notes\n\nA **token** is at the **⊢ top level** if it is not inside braces `{}` within the **⊢** filter.\n\nExample:\n\n```\n⊢\n  △――\n  z=x+3\n  {z=x+3}\n  {――}\n  (legal ――b4)\n  {legal ――b4}\n```\n\n- First `△――` is a normal dash constituent.\n- `z=x+3` **without braces** is illegal here — `+` is interpreted as repetition.\n- `{z=x+3}` is fine.\n- `(legal ――b4)` is illegal top-level usage without braces.\n- `{legal ――b4}` is valid.\n\n---\n\n## Filter vs Constituent Example\n\nFilter constituent:\n\n```\n⊢\n  {△―― △――}\n  ――\n```\n\nMatches *white-to-move* positions where both `△――` inside braces are filters, not constituents.\n\nIf we remove braces:\n\n```\n⊢\n  △――\n  △――\n  ――\n```\n\nIt fails because after first `△――` matches (white moves), the next position is black to move, so second `△――` fails.\n\n---\n\n## Status Filters\n\nThe state of the **⊢** filter can be queried with **path status filters**, including:\n\n- `pathstatus`\n- `pathlastposition`\n- `pathcount`\n- `pathcountunfocused`"
  },
  {
    "name": "pathcount",
    "parameters": "",
    "arguments": "",
    "example": "pathcount",
    "link": "pathstatusfilters.html",
    "description": "⊢\n status \nfilters\n\n  CQL supports several filters to \nquery the status of an ongoing or \nrecently completed \n⊢\n filter.\n\n\n  \n\n    \nname\nvalue\n\n    \npathstart\nstart \nposition\n\n    \npathdebug\ninte\nrnal use only\n\n    \npathlastposition\nt\nail of last matching move of last \nmatching path\n\n    \npathcount\nnumber \nmoves in path so far not including \nunfocused moves\n\n    \npathcountunfocused\ntotal moves so far including \nunfocused moves\n\n  \n\n\n\n  The \npathstart\n and \n\npathlastposition\n filters,\nif invoked from outside any enclosing \n\n⊢\n filter, \nhave as value the start position or \nlast position respectively of the most\nrecent matching \n⊢\n filter, \nif any.\n\n\n  Note: all these filters are \nexperimental."
  },
  {
    "name": "pathcountunfocused",
    "parameters": "",
    "arguments": "",
    "example": "pathcountunfocused",
    "link": "pathstatusfilters.html",
    "description": "CQL supports several filters to \nquery the status of an ongoing or \nrecently completed \n⊢\n filter.\n\n\n  \n\n    \nname\nvalue\n\n    \npathstart\nstart \nposition\n\n    \npathdebug\ninte\nrnal use only\n\n    \npathlastposition\nt\nail of last matching move of last \nmatching path\n\n    \npathcount\nnumber \nmoves in path so far not including \nunfocused moves\n\n    \npathcountunfocused\ntotal moves so far including \nunfocused moves\n\n  \n\n\n\n  The \npathstart\n and \n\npathlastposition\n filters,\nif invoked from outside any enclosing \n\n⊢\n filter, \nhave as value the start position or \nlast position respectively of the most\nrecent matching \n⊢\n filter, \nif any.\n\n\n  Note: all these filters are \nexperimental."
  },
  {
    "name": "pathlastposition",
    "parameters": "",
    "arguments": "",
    "example": "pathlastposition",
    "link": "pathstatusfilters.html",
    "description": "CQL supports several filters to \nquery the status of an ongoing or \nrecently completed \n⊢\n filter.\n\n\n  \n\n    \nname\nvalue\n\n    \npathstart\nstart \nposition\n\n    \npathdebug\ninte\nrnal use only\n\n    \npathlastposition\nt\nail of last matching move of last \nmatching path\n\n    \npathcount\nnumber \nmoves in path so far not including \nunfocused moves\n\n    \npathcountunfocused\ntotal moves so far including \nunfocused moves\n\n  \n\n\n\n  The \npathstart\n and \n\npathlastposition\n filters,\nif invoked from outside any enclosing \n\n⊢\n filter, \nhave as value the start position or \nlast position respectively of the most\nrecent matching \n⊢\n filter, \nif any.\n\n\n  Note: all these filters are \nexperimental."
  },
  {
    "name": "pathstatus",
    "parameters": "",
    "arguments": "",
    "example": "pathstart",
    "link": "pathstatusfilters.html",
    "description": "CQL supports several filters to \nquery the status of an ongoing or \nrecently completed \n⊢\n filter.\n\n\n  \n\n    \nname\nvalue\n\n    \npathstart\nstart \nposition\n\n    \npathdebug\ninte\nrnal use only\n\n    \npathlastposition\nt\nail of last matching move of last \nmatching path\n\n    \npathcount\nnumber \nmoves in path so far not including \nunfocused moves\n\n    \npathcountunfocused\ntotal moves so far including \nunfocused moves\n\n  \n\n\n\n  The \npathstart\n and \n\npathlastposition\n filters,\nif invoked from outside any enclosing \n\n⊢\n filter, \nhave as value the start position or \nlast position respectively of the most\nrecent matching \n⊢\n filter, \nif any.\n\n\n  Note: all these filters are \nexperimental."
  },
  {
    "name": "persistent",
    "parameters": "quiet",
    "arguments": "variable=number",
    "example": "persistent x=5",
    "link": "persistent.html",
    "description": "## `persistent` Filter\n\nThe **`persistent`** filter declares a **numeric**, **string**, or **set** variable whose value is retained between games.\n\n---\n\n### Syntax\n```cql\npersistent var = value\npersistent var += value\npersistent quiet var = value\n```\n\n---\n\n### Rules\n- The variable must **not** have been used **non-persistently** earlier in the script.  \n- On first use, the variable is initialized to:\n  - `0` for numeric variables  \n  - `\"\"` for strings  \n  - empty set `{}` for set variables  \n- The variable **retains its value** between games.\n- After processing all games, CQL outputs the final values of all persistent variables to **standard output**.\n\n---\n\n### Examples\n```cql\npersistent x = 3        // start with value 3\npersistent y += 1       // increment between matching games\npersistent quiet s = \"\" // persistent string, no end-of-game output\n```\n\n---\n\n### Output\nAt the end of processing, CQL will display persistent variable values, for example:\n```\nNumberGames: 93839\nNumberStalemates: 14072\nNumberUnderpromotions: 11759\n...\nNumberBlackWins: 0\nNumberPositions: 1723184\n```\n\n---\n\n### Notes\n- **Old syntax** without assignment (e.g., `persistent x`) was allowed in versions 6.0.2–6.0.5 but is **not supported** in 6.1+ and will cause an error.\n- **`persistent quiet`** disables the automatic output of the variable at the end of processing — useful for storing large strings from `readfile` or other intermediate data.\n- Persistent variables are often used for:\n  - Counting occurrences across multiple games\n  - Storing data from external files\n  - Sharing state between separate matches\n\n---\n\n### Related\n- [`readfile`](#readfile) — load data into a persistent string\n- [`dictionary`](#dictionary) — for complex shared data between games"
  },
  {
    "name": "piece",
    "parameters": "inall",
    "arguments": "filter",
    "example": "piece x in A x attacks k",
    "link": "piece.html",
    "description": "# The `piece` Filter\n\nThe `piece` filter has two forms:\npiece variable in infilter body piece all variable in infilter body\nHere:  \n\n- **variable** is a *piece variable*.  \n- **infilter** is a *set filter*.  \n- **body** is any *filter*.  \n\n---\n\n### Example\n```\npiece x in A x attacks n\n```\nThis is a `piece` filter with:  \n- **variable** = `x`  \n- **infilter** = `A`  \n- **body** = `x attacks n`  \n\n---\n\n## Piece Filter vs. Piece Assignment Filter\n\nThe `piece` filter should **not** be confused with the *piece assignment filter* (e.g., `piece x = N`), which is entirely different.\n\n---\n\n## Operation of the `piece` Filter\n\n1. The set of squares (**inset**) represented by the **infilter** in the current position is computed.\n2. For each square `s` in **inset** on which there is a piece:\n   - The piece variable (**variable**) is bound to the identity of the piece on `s`.\n   - The **body** filter is evaluated.\n\n---\n\n### Without `all`\nIf the `all` keyword is **not** present after `piece`,  \nthe `piece` filter is a **set filter** that represents the set of squares `s` in **inset** to which **variable** was bound **and** for which **body** was true.\n\n### With `all`\nIf the `all` keyword **is** present after `piece`,  \nthe `piece` filter matches the position **only if** **body** is true whenever `variable` is bound to a square in **inset**.\n\n---\n\n## Example: Pinning Pieces\n\nSuppose the current position is:\n```\n4R2R/6r1/4n3/Rb2kppR/8/4K3/8/4R3 w - - 0 1\n```\nFrom the above position, consider:\nThis is a `piece` filter that matches a position in which a white rook pins a black piece (same positions as matched by `pin from R`).\n\nTo determine the squares represented:\n\n1. Set `Pinner` to each white rook:\n   - **Re1 Ke3 ke5** → fails (Ke3 is not a black piece)\n   - **Ra5 bb5 ke5** → succeeds\n   - **Re8 ne6 ke5** → succeeds\n   - **Rh8 rg7 ke5** → fails (not an xray)\n   - **Rh5 pg5 pf5 ke5** → fails (two black pieces between R and k)\n\n**Result:** The filter represents the white rooks on `a5` and `e8`, i.e., squares `[a5, e8]`.\n\n---\nThis filter returns the set of squares on the second rank occupied by a white pawn that later promotes (Excelsior theme).\n\n---\n\n## Usage in CQL Files\n\nThe `piece` filter is used in:\n\n- `bristol-universal.cql`\n- `clearance-delayed.cql`\n- `excelsior-return.cql`\n- `excelsior-simple.cql`\n- `movedblackpieceecho.cql`\n- `platzwechselecho.cql`\n- `platzwechseln1.cql`\n- `platzwechseln2.cql`\n- `rook-corners-1.cql`\n- `rook-corners-2.cql`\n- `rook-corners-rotate-with-range.cql`\n- `serialpin.cql`\n- `turton.cql`\n- `wurzburg-plachutta.cql`\n\n---\n\n## Example from `excelsior-return.cql`"
  },
  {
    "name": "piecename",
    "parameters": "",
    "arguments": "set",
    "example": "piecename d4",
    "link": "piecename.html",
    "description": "# The `piecename` Filter\n\nIf **F** is a set filter, then:\n\npiecename F\n\noperates as follows:\n\n1. **F** is evaluated in the current position to get a set of squares **X**.\n2. If **X** does not contain exactly one square, the filter does not match.\n3. Otherwise, the filter returns a one-character string denoting the name of the piece on that square. This character is from `\"RBNQKPrbnqkp\"` or the underscore `_`.\n\n## Example\nOne way to check whether the previous move was a black underpromotion:\n\n```cql\npiecename from == \"p\"  \ntypename to in \"rnb\"\n```\nThis is equivalent to:\n\n```\ncurrentmove ―― = ♖♗♘\n```\n\n**Note:** Unicode symbols are not returned by `piecename`."
  },
  {
    "name": "piece",
    "parameters": "",
    "arguments": "variable=set",
    "example": "piece x = K",
    "link": "variables.html#pieceassignment",
    "description": "The piece (assignment) filter consists of the word\n\npiece\n, followed by the \nname of a variable, then an \n\n=\n sign, then a set \nfilter, e.g.:"
  },
  {
    "name": "pieceid",
    "parameters": "",
    "arguments": "set",
    "example": "pieceid x",
    "link": "pieceid.html",
    "description": "The \npieceid\n filter is a \nnumeric filter that consists of the \nkeyword \npieceid\n followed \nby one argument, a \nset \nfilter\n:\n\n  pieceid \nset\n\n\n\nAn example of a \npieceid\n \nfilter with argument \n♕\n is the right hand side of the \nassignment\nfilter\n below:\n\n  x=pieceid \n♕\n\n\n\nEach piece in a game has a unique \nnumeric value, called its \npiece \nid\n. This value does not change as\nthe piece moves or promotes.\n\n\nSuppose the set filter following \n\npieceid\n corresponds (in \nthe current position) to a set of \nsquares \nset\n.\nIf the number of elements in \n\nset\n is not equal to 1, then \nthe \npieceid\n filter does \nnot match. Otherwise the \nset\n \ncontains\na single square \ns\n. If the \nsquare \ns\n is empty, then the \n\npieceid\n filter does not \nmatch.\n\n\nIf the square \ns\n contains a \npiece, then the value of the \n\npieceid\n filter is the \nvalue of the piece id of the piece on \n\ns\n.\n\n\nThus, in the example above, if there \nis exactly one white queen in the \ncurrent position, \nthen the value of \npieceid \n♕\n is the piece id of that queen. \nOtherwise, the \npieceid \n♕\n filter does not match.\n\nExamples\n\nThe \npieceid\n filter is \nused in \nunderpromotionecho.cql\n, which \nfinds games in which two positions are\nthe same except that a pawn has \npromoted to a different piece in one \nof the positions.\n\n\nThere, the user \nvariable\n \n\nMismatch\n is bound to a \nsingle square, representing the only \nsquare in which the current position \nand the position named by the variable\n\nsource\n differ. But even \nthough the squares are different in \nthe sense of having pieces of \ndifferent types on them, the pieces on\nthe squares will have the same \n\npieceid\n if they were the \nresult of promoting the same pawn. So \nthe line\n\n      pieceid Mismatch==source:pieceid\nMismatch\n\n\n\nchecks that the \npieceid\n \nof the piece on the \n\nMismatch\n square in the \ncurrent position is the same as the\n\npieceid\n of the piece on \nthe \nMismatch\n square in \nthe source.\n\n\nThus, in the position in the Didukh \nstudy matched by running \nunderpromotionecho.cql\n against \nthe \nsample \ndatabase\n database, the \n\nsource\n variable will be \nbound to the mainline position after \nmove 9:\n\nDidukh 2006, mainline after \nwhite&#39;s move 9\n \n(found from CQL\nfile: \nunderpromotionecho.cql\n)\n\n\n\n\n\n\n\n\nThe \ncurrent\n position will\nbe bound to the position in the \nvariation after move 9:\n\nDidukh 2006, variation after \nwhite&#39;s move 9\n\n\n\n\n\n\n\n\nThe \nMismatch\n variable \nwill be bound to \nd8\n, the \nsquare on which their contents differ.\nBut the \npieceid\n of the \nthat square in these two position will\nbe the same, since the \n♕\n and \nR\n are the result of\npromoting the same pawn."
  },
  {
    "name": "pin",
    "parameters": "from through to",
    "arguments": "",
    "example": "pin from Q",
    "link": "pin.html",
    "description": "# The `pin` Filter\n\nThe `pin` filter matches a position if the position has any pins that match the `pin` filter.\n\nAny pin has three distinguished features:\n- **Pinning piece**: Must be a sliding piece (rook, bishop, or queen).\n- **Pinned piece**: Must be a piece of a different color from the pinning piece.\n- **To square**: Can be any square, but if occupied it must contain a piece of the same color as the pinned piece.\n\n## Parameters\nThe `pin` filter has three optional parameters: `from`, `through`, and `to`.  \nEach parameter is specified by its keyword followed by a set filter:\n```cql\npin\npin through ♖\npin from ♕ \npin to ♛\npin from ♕ through ♜ to ♚\n```\n**Defaults:**\n- `from` → pinning piece\n- `through` → pinned piece\n- `to` → ♔♚ (the to square)\n\nThus:\n- `pin` is the same as `pin through ◭ from ◭ to ♔♚`.\n- `pin from ♕` is the same as `pin from ♕ through ◭ to ♔♚`.\n\n## Matching Criteria\nA pin matches a `pin` filter if:\n1. The pinning piece lies within the set represented by the `from` parameter.\n2. The pinned piece lies within the set represented by the `through` parameter.\n3. The to square lies within the set represented by the `to` parameter.\n\n### Examples\n- `pin` → matches positions where some piece is pinned against its own king.\n- `pin from ♕` → matches positions where a white queen pins a black piece against the black king.\n- `pin through a` → matches positions where a black piece is pinned against its own king.\n\n## Set Representation\n`pin` is a **set filter**. The squares it represents depend on the first parameter after `pin`:\n- If first parameter is `from` → represents squares of the pinning pieces.\n- If first parameter is `to` → represents the to squares.\n- If first parameter is `through` → represents the pinned pieces.\n\nIf no parameters are given, the first is taken as `through`.  \nThus:\n- `pin` represents squares of pinned pieces.\n- `pin > 4` matches positions with more than 4 pins (against own king).\n- `pin through △ > 2` → more than 2 pinned white pieces.\n\n## Example Usage\n- `pin through △` → squares with a white piece pinned by black against the white king.\n- `pin through △ ≥ 3` → at least 3 pinned white pieces.\n- `comment (\"pinned pieces: \" pin through △)` → outputs pinned piece squares.\n\nIn `pins.cql`, output is sorted by the number of pins:\n\n``` cql\nsort \"number of pinned pieces\" { comment (\"Pinned pieces: \" pin through △) pin through △ ≥ 3 }\n```\n**Example:** Melnichenko 2014, after `7...R:h6` stalemate, found in `pins.cql`.  \nThe pinned piece locations are output as a comment due to the set value of the `pin` filter.\n\n**Note:** Only one comment is printed for the position with the maximum number of pins due to *smart comments*, which output only maximal comments in a sort.\n"
  },
  {
    "name": "player",
    "parameters": "implicit search parameter",
    "arguments": "",
    "example": "player \"Kasparov\" player white ~~ \"Kas.*ov\"x=player black",
    "link": "tagqueryfilters.html#player",
    "description": "# The `player` Filter\n\nThe `player` filter matches player names from the PGN header.\n\n## Basic Usage\nplayer white \"Kasparov\"  \nis equivalent to:  \n\"Kasparov\" in player white  \n\nThis will match a position exactly when the string \"Kasparov\" is a substring (or equal to) the tag value of the \"White\" tag name in the PGN header. In other words, it matches games where Kasparov is playing White.\n\nNote: Regular expression matching is not performed on implicit search arguments like player white \"Kasparov\".\n\nYou can use:\n- player white → to get the name of the White player from the PGN header.\n- player black → to get the name of the Black player from the PGN header.\n\n## Regular Expression Matching\nTo match a tag value against a regular expression, use the ~~ operator:\n\nplayer white ~~ \"K.*v\"  \nevent ~~ \"W.* +Zee\"  \nplayer black ~~ \"Fi[sch]+er\"  \ndate ~~ \"198\\d\\.10\\...\"\n\n### Example in Detail\nplayer white ~~ \"K.*v\"  \n- Target filter: player white  \n- Pattern: \"K.*v\"  \n\nHow it works:  \n1. player white retrieves the value of the \"White\" tag in the PGN header (name of the White player).  \n2. The pattern \"K.*v\" matches any string that:  \n   - Starts with K  \n   - Has zero or more characters in between  \n   - Ends with v  \n3. If the value from \"White\" matches the pattern, the filter succeeds; otherwise, it fails.\n\n## Summary\n- Use player white \"Name\" or player black \"Name\" for simple substring matching in PGN headers.  \n- Use ~~ with player white or player black for advanced regex matching."
  },
  {
    "name": "ply",
    "parameters": "",
    "arguments": "",
    "example": "ply>100",
    "link": "ply.html",
    "description": "# The `ply` Filter\n\nThe `ply` filter is a **numeric filter** whose value is the **ply value** of the current position. The ply value of the **initial position** is `0`, and the ply value of any other position is one greater than the ply value of its **parent**.\n\n## Examples\nThe `ply` filter is used in `averagedistance.cql` where:\n\nply > 10\n\nrequires that the ply of the current position be greater than 10.\n\nIt is also used there to compute the average move length:\n\nSum / ply > 4 * Scale"
  },
  {
    "name": "position",
    "parameters": "",
    "arguments": "number",
    "example": "position 0",
    "link": "position.html",
    "description": "The `position` filter takes a single numeric filter argument (`id`) and returns the position whose **position id** equals `id`.  \n- If no position has that id, the filter fails to match.  \n- `position 0` always refers to the **initial position**.\n\n**Examples**  \n`position 5` → Matches position with id 5  \n`position 1+positionid` → Matches position with id equal to 1 plus the current position id  \n`position ply+1` → Matches position immediately after the current one"
  },
  {
    "name": "positionid",
    "parameters": "",
    "arguments": "",
    "example": "positionid == 0",
    "link": "positionid.html#positionidfilter",
    "description": "positionid \nfilter"
  },
  {
    "name": "power",
    "parameters": "",
    "arguments": "set",
    "example": "power A<5",
    "link": "power.html",
    "description": "## `power` filter\n\nThe `power` filter consists of the word `power` followed by a **set filter**:\n\n```cql\npower △\n```\nA `power` filter has a numeric value equal to the power of the pieces on the squares denoted by its set filter.\n\nThe **power** of a piece is its material value:\n\n| Piece type    | Power |\n|---------------|-------|\n| pawn          | 1     |\n| knight        | 3     |\n| bishop        | 3     |\n| rook          | 5     |\n| queen         | 9     |\n| king          | 0     |\n| empty square  | 0     |\n\n---\n\nThe power of a set of squares in a position is the sum of the power of all the pieces on squares in that set in the position.\n\nFor example:\n```cql\npower △ ≥ 15\n```\nmatches positions where the total power (material value) of the White pieces is at least 15.\n\n---\n\n### Example 1\nThe diagram below shows the earliest first prize win study with an initial total power of 7:\n\n*V. Kosek 1926*  \n(found from CQL file: `power7firstprize.cql`)\n\n---\n\n### Example 2\nThe `power` filter can also be used to find **material imbalances**, such as in the study below where Black wins despite having a large material advantage, and White having only a single pawn:\n\n*T. Dawson 1945*  \n(found from CQL file: `powerA1alarge.cql`)\n\n---\n\n### Other uses\nThe `power` filter is also used in:\n- `massivestalemate.cql`\n- `pinstallmate.cql`\n- `powerdifference-stalemate.cql`"
  },
  {
    "name": "primary",
    "parameters": "",
    "arguments": "",
    "example": "primary",
    "link": "currentmove.html#primary",
    "description": "primary\ncurre\nnt move was a primary move, the first \nappearing move in the PGN file from \nthe parent of the current \nposition"
  },
  {
    "name": "pseudolegal",
    "parameters": "",
    "arguments": "――filter",
    "example": "pseudolegal♔――a-h4",
    "link": "legal.html#pseudolegal",
    "description": "pseudolegal"
  },
  {
    "name": "puremate",
    "parameters": "",
    "arguments": "",
    "example": "puremate",
    "link": "puremate.html",
    "description": "The \npuremate\n filter is \ntrue in a position if the position is \na pure mate. A pure mate, loosely \nspeaking, is\n  one in which there is no unnecessary\nattack by the mating side on a square \nadjacent to the mated King or\n  the king itself.\n\n\n  \nParticipants: the \nvalue of the puremate filter\n\n    If the current position is a pure \nmate, the value of the \n\npuremate\n filter is the \nset of squares on which there is a \n\nparticipating piece\n. If the \ncurrent position is not a pure mate, \nthe value returned is the empty set.\n\n\n    If the current position is a pure \nmate of the black King, the \nparticipating white pieces are each \nwhite piece that either:\n    \n\n      \nis checking black;\n      \nis checking a square \nadjacent to the black king;\n      \n is pinned;\n      \nwhen black is not in double \ncheck, is pinning a potential refuter;\nor\n      \nwhen black is not in double \ncheck, lies between a potential \nrefuter and a refutation square the \nrefuter would otherwise attack.\n    \n\n    A \nrefutation square\n above\nis a square whose occupation by black \nwould disrupt the mate, and is defined\nas either the white king, a checking \npiece, or a square between a checking \npiece and the black king. A \n\npotential refuter\n is a black \npiece that, but for checks and pins, \ncould move to a refutation square \n(that is, it could make a pseudolegal \nmove to the square).\n\n\n    A black piece is a participating \npiece in the case of a black pure mate\nif it is either:\n    \n\n      \nthe black king;\n      \nadjacent to the black king;\n      \nblocking a check by black on\nthe white king; or\n      \n there is no double check \nand the piece is blocking a move by a \nblack piece to a refutation square.\n    \n\n\n\n    If white is in mate, the \ndefinitions above are modified \naccordingly.\n    \nNotes on the definition of \npure mate\n\n    There are numerous mutually \nincompatible definitions of \npure \nmate\n\npublished and on the internet. \nMoreover, nearly all of these \ndefinitions are susceptible to \nmultiple interpretations.\n\n\nTo begin the process of determining \nthe\ndefinition to use with CQL, we use the\nfollowing motivation (from \nThe \nBritish Chess\nMagazine\n, August, 1898, p. 347), \ndefining a &#34;clean mate&#34; as:\n\n\na mate in in which there is no \nunnecessary attack by the mating side\non a square in the mated King&#39;s field \nor the king itself.\n\n\n\n\n\n\n\n\n\n\nThe author of this &#34;clean mate&#34; \ndefinition cites an early definition \nfrom the 1896 \nBrighton \nSociety\n, but I have not been able\nto locate this.\n\n\nThe key here is that each (a) \n\nattack\n must be (b) \n\nnecessary\n.\n\n\nAs to (a): we are looking at \n\nattacks\n by the attacking\nside. As will be seen below, some \nauthors have suggested in their \ndefinitions that it is the\nattacking \npiece\n that must be \nnecessary in some cases, or in one \ncase\nthe attacking \nmove\n. We \ndisagree: we think it is  more\nintuitive to consider actual attacks, \nrather than the piece causing the\nattacks or the move leading to the \nattack. (By contrast, in \n\nmodel\n mates\nwe do consider the necessity of a \npiece itself).\n\n\nAs to (b): the attack must be \n\nnecessary\n. Many authors allow\nany number of attacks on attacking \npieces in the king&#39;s field. For\nexample, consider the following \nposition:\n\n\n\n\n\n\n\n\n\nHere, black \n♚\nh8 is in mate from the \n♕\nh7. Each \nempty\n square in the\nking&#39;s field is guarded once.  But the\n\n♕\nh7 is attacked three\ntimes: by the \n♗\ng6, the \n♖\nh2, and the \n♘\ng5.\nObviously, these attacks are \n&#34;unnecessary&#34; so the position should \n\nnot\n\nbe pure mate. Calling this pure mate \nin our view is not consistent\nwith the early definitions and also \nnot with the spirit of term. It\njust doesn&#39;t make intuitive sense in \nour opinion to allow a mate with\nso much superfluous attacking force \nand call that pure.\n\n\nHowever, some widely available sources\npermitted the apparent absurdity of \nallowing an attacker in the king&#39;s \nfield to be defended multiple times, \ne.g.  the \nOxford Companion to \nChess\n (2d) edition:\n\n\n\npure mate, or clean mate, \na checkmate that meets the following \ncriteria: unoccupied squares in the \nKing&#39;s Field are attacked once only; \npieces that function as self-blocks \nare not under attack unless \nnecessarily pinned; and the mating \nmove is not a double check unless this\nis necessary to prevent the defender \nfrom interposing a man or capturing a \nchecking piece.\n\n\n\nNote that this \nallows\n \nattacking pieces to be defended \nmultiple times - only \n\nunoccupied\n and \n\nself-blocking\n squares are \nrestricted.\n\n\nWe take our definition of \npure \nmate\n from the \nEncyclopedia\nof Chess Problems\n. We believe \nthat in most cases this is a more\nauthoritative source: for one thing it\nis exclusively focused on\nproblem themes. It goes into far more \ndetail, and contains far more themes,\nthan either Wikipedia or the \n\nOxford Companion\n. More \nimportant, the\n\nEncyclopedia of Chess \nProblems\n&#39; definition simply makes\nmore sense to\nus:\n\n\nMate is called pure when there is only\none guard or block on each\nsquare in the (mated) King&#39;s field. \nDouble check is allowed if the\nmate could be parried without it. A \npin-mate is allowed if pinning is\nneeded in mate.\n\n\nNote the key change from the word \n\nattack\n in \nOxford \nCompanion\n to the word \n\nguard\n. This difference is \nsignificant in the\ncases like the following:\n\n\n\n\n\n\n\n\n\n\n\nHere, the square \nf8\n is \nnot \nattacked\n at all. \nTherefore, under the\ndefinition in the \nOxford \nCompanion\n (requiring squares to \nbe attacked\n\nonce only\n), this would \n\nnot\n be considered pure mate \nThose sources do not allow squares in \nthe king&#39;s field\nto be attacked 0 times. Again, we are \nsure this omission is\nunintentional, but it is there.\n\n\n\npins and double check\n\nSources differ on whether and when \ndouble check is permitted in a pure \nmate.\n\nOxford Companion\n states that \nin a pure mate, &#34;the mating move is \nnot a double\ncheck unless this is necessary to \nprevent the defender from\ninterposing a man or capturing a \nchecking piece.&#34;\n\n\nUnder the \nOxford\n definition, \nthere might be two identical \npositions, one of\nwhich is a pure mate, and one of which\nis not, depending only on the\nprevious move (for example, if the \nprevious move captured a piece that\nwould otherwise have interposed). We \nagain concur with \nEncyclopedia of\nChess Problems\n and with the \n\nThe British Chess Magazine\n \nthat \npure mate\nshould be based on the position \nitself\n, not on the move history\nleading up to it. \n\n\nThis motivates our treatment of double\ncheck, following the \nEncyclopedia\nof Chess Problems\n:\n\n\nWe preliminarily say that a white \npiece \nx\n \nguards\n a \nsquare \ny\n in the\nBlack King&#39;s field (which we define to\nexclude the king itself) if\neither\n\n\n\n\n \n \nx\n attacks \ny\n; \nor\n \n \nx\n would attack \n\ny\n if the black king were on \n\ny\n.\n\n\n   \n   For example, in the above position,\nthe white rook on \na8\n \n\nguards\n (but does not \n\nattack\n) \nf8\n.\n\n\nThe conditions then are:\n\n\n \n Every empty square in the King&#39;s\nfield is guarded exactly once\n\n Every square with a white piece \nin the King&#39;s field is guarded\n exactly once\n \n Every square with a black piece \nin the King&#39;s field is either\n   unguarded or guarded once by a \nnecessary pin\n\n\n\n\nA \nnecessary\n pin is a pin \nwhose absence would allow the pinned \npiece\neither to affect the mate, either by \ninterposing between a checker and\nthe king, or by capturing a checker.  \nThus, if the king is in double\ncheck, there are no necessary pins.\n\n\nFinally, double check is allowed only \nif the double check itself is\n\nnecessary\n, which we interpret\nto mean that each check could be \nrefuted\nif not for the other check, where \n\nrefuted\n means that its \nchecker\ncould be captured or prevented by \ninterposition. (Of course, the mate\ncan never be refuted by moving the \nblack king, because removing just a\ncheck does not change the king&#39;s \nflight squares).  The phrase \nif \nnot\nfor the other check\n here means \nthat only the attack on the king&#39;s \nsquare\nby that checker is counterfactually \neliminated in determining whether\na black piece could interpose.\n\n\n\n\nmodelmate\n\nThe \nmodelmate\n filter is \ntrue if the current position is a \n\nmodel mate\n: a pure mate in \nwhich each non-King, non-pawn piece of\nthe mating side participates. Thus, \n\nmodelmate\n is true in \nposition whenever\n\n  \n⬓\n{\n   btm puremate\n  \n♖\n♘\n♗\n♕\n in \npuremate}\n\n\n\n(Note that the first \n\npuremate\n in the CQL code \nabove cannot be omitted, because \notherwise any black-to-move position \nthat is not a pure mate would match if\nthe only white pieces were kings and \npawns.)\n\n\nThe value of the \n\nmodelmate\n filter, like \nthe \npuremate\n filter, is \nthe set of participants in the model \nmate (or the empty set if there is no \nmodel mate).\n\n\n\nidealmate\n\nThe \nidealmate\n filter is \ntrue if the current position is an \n\nideal mate\n: a pure mate in \nwhich each piece participates.\nThe \nidealmate\n filter is \nequivalent to:\n\n  \n◭\n==pur\nemate\n\n\n\n\nexamples\n\nTo find pure mates that are not model \nmates, use\n\n  puremate\n  not modelmate\n\n\n\nTo sort pure mates by the number of \nparticipating black pieces in a black \nmate, use\n\n  puremate btm\n  sort &#34;# participating black pieces&#34; \n\n▲\n&amp;pure\nmate"
  },
  {
    "name": "purestalemate",
    "parameters": "",
    "arguments": "",
    "example": "purestalemate",
    "link": "purestalemate.html",
    "description": "The \npurestalemate\n \nfilter is true in a position if the \nposition is a pure stalemate. A pure \nstalemate, loosely speaking, is\n  one in which there is no unnecessary\nattack by the mating side on a square \nadjacent to the mated King.\n\n\n  More formally, a black-to-move \nposition is a pure stalemate if each \nof the following conditions holds:\n    \n\n      \neach empty square adjacent \nto the black king is attacked exactly \nonce by a white piece;\n      \neach white piece adjacent to\nthe black king is attacked exactly \nonce by a white piece;\n      \neach unpinned black piece \nadjacent to the black king is not \nattacked by a white piece; and\n    \n each pinned black piece \nadjacent to the black king is not \nattacked by a white piece.\n\n\n\n\n    A white-to-move pure stalemate is \ndefined similarly.\n  \nParticipants: the \nvalue of the purestalemate filter\n\n    If the current position is a pure \nstalemate, the value of the \n\npuremate\n filter is the \nset of squares on which there is a \n\nparticipating piece\n. If the \ncurrent position is not a pure mate, \nthe value returned is the empty set.\n\n\n    If the current position is a pure \nstalemate of the black King, the \nparticipating white pieces are each \nwhite piece that either:\n    \n\n      \n is pinned;\n      \nis pinning a black piece\n      \nis attacking a square \nadjacent to the black king.\n    \n\n\n\n    Every black piece is considered to\nbe a participating piece when black is\nin stalemate.\n\n\n    If white is in stalemate, the \ndefinitions above are modified \naccordingly.\n    \n\nmodelstalemate\n\nThe \nmodelstalemate\n filter\nis true if the current position is a \n\nmodel stalemate\n: a pure \nstalemate in which each non-King, \nnon-pawn piece of the stalemating side\nparticipates. Thus, \n\nmodelstalemate\n is true in\nposition whenever\n\n  \n⬓\n{\n   btm purestalemate\n  \n♖\n♘\n♗\n♕\n in \npurestalemate}\n\n\n\n(Note that the first \n\npurestalemate\n in the CQL \ncode above cannot be omitted, because \notherwise any black-to-move position \nthat is not a pure stalemate would \nmatch if the only white pieces were \nkings and pawns.)\n\n\nThe value of the \n\nmodelstalemate\n filter, \nlike the \npurestalemate\n \nfilter, is the set of participants in \nthe model stalemate (or the empty set \nif there is no model stalemate).\n\n\n\nidealstalemate\n\nThe \nidealmate\n filter is \ntrue if the current position is an \n\nideal stalemate\n: a pure \nstalemate in which each piece \nparticipates.\nThe \nidealstalemate\n filter\nis equivalent to:\n\n  \n◭\n==pur\nestalemate"
  },
  {
    "name": "Q",
    "parameters": "",
    "arguments": "",
    "example": "Q==2",
    "link": "piecedesignator.html#Q",
    "description": "white queen"
  },
  {
    "name": "q",
    "parameters": "",
    "arguments": "",
    "example": "q==2",
    "link": "piecedesignator.html#q",
    "description": "black queen"
  },
  {
    "name": "R",
    "parameters": "",
    "arguments": "",
    "example": "R==2",
    "link": "piecedesignator.html#R",
    "description": "white rook"
  },
  {
    "name": "r",
    "parameters": "",
    "arguments": "",
    "example": "r==2",
    "link": "piecedesignator.html#r",
    "description": "black rook"
  },
  {
    "name": "rank",
    "parameters": "",
    "arguments": "set",
    "example": "rank K == rank k",
    "link": "rank.html",
    "description": "The \nrank\n filter is a \nnumer\nic filter\n that takes a single \nset \nfilter\n as \nargu\nment\n:\n  \n    rank a1 == 1\n    rank c3 == 3\n\n\n\n  If the set of squares represented by\nits argument contains a single square \n\ns\n, then the value of the\n  \nrank\n filter is the \nnumeric value of the rank of \n\ns\n. \n\n\n  If the set of squares represented by\nits argument does not contain exactly \none single square, then the \n\nrank\n filter does not \nmatch the current position.\n\n\n  The \nrank\n filter is not \naffected by transform filters like \nflip\n or \nrotate90\n .\n  \nExamples\n\n  The \nrank\n filter is used\nin \na\nveragedistance.cql\n, \nchamele\non.cql\n, \n\nflipverticalecho.cql\n, \nhorizontallysymmetric.cql\n, \nplatzwechselecho.cql, \npl\natzwechseln2.cql\n ."
  },
  {
    "name": "ray",
    "parameters": "direction",
    "arguments": "(set...)",
    "example": "ray (R a k)",
    "link": "ray.html",
    "description": "The ray filter\n\nThe \nray\n filter is used to\nfind patterns of pieces that are \narranged along a straight line.\n\n\nA \nray\n filter consists of \nthe keyword \nray\n followed \nby an optional \ndirections\n \nfollowed by a list of \nset \nfilters\n enclosed in parentheses:\n\nray (\n△\n \n\n▲\n )\nray up (\n△\n \n\n▲\n \n\n♙\n)\nray vertical (\n△\n \n\n△\n \n\n△\n \n\n▲\n \n\n♚\n)\n\n\n\n\nNote\n: most of the time in \nCQL, the simpler \n→\n is \nall that is needed instead of \n\nray\n.\n\n\nA \nray\n on the chessboard is  \nthe set of squares along a straight \nline from a given \nstart point\n\nalong one of the 8 \nb\nasic directions\n .\n\n\nFor example, there is an \n\nup\n ray from the start \npoint \ne2\n. That ray has \nseven squares, \ne2-8\n:\n\nray from e2 to e8\n\n\n\n\n\n\n\n\n\n\nEach ray \norders\n the squares \non that ray. The ordering is\ndetermined by the direction of the \nray. If squares \ns\n and \n\nt\n are on the\nray, then \ns\n is \n\nearlier\n\nthan \nt\n  if \nt\n can be \nreached from \ns\n by moving \nalong the\nray&#39;s basic direction.\n\n\nFor example, in the \nup\n \nray starting on \ne2\n, the \nsquare \ne3\n is earlier\nthan \ne7\n. But in a \n\ndown\n ray starting on \n\ne8\n, the square \n\ne7\n is earlier\nthan \ne2\n.\n\n\n\n\nThe \nbasic directions\n of a ray\nfilter are the basic directions \ncontained in the set of directions \nindicated by its direction parameter \n(recall that\nsome directions represent a set of \nbasic directions: \n\nvertical\n represents the \nset containing \nup\n and \n\ndown\n for example. If \nthere is\nno direction parameter to the \n\nray\n filter, the direction\nparameter is taken to be \n\nanydirection\n, all the 8 \nbasic directions.\n\n\nLet \nR\n be the following \n\nray\n filter:\n\n  ray \ndirs\n \n(\ns\n1\n \n\ns\n2\n ... \n\ns\nn\n)\n\nwhere \ndirs\n indicates a set of\nbasic directions and each \n\ns\ni\n is a set \nfilter.\n\n\nA ray \nmatches\n the \n\nray\n filter \nR\n if \nthere is a sequence \n\nS\n of \n\nn\n distinct \nsquares on the ray such that\n\n\n  \nThe \ni\n&#39;th \nsquare of  \nS\n is \na member of the set represented by the\nset filter \ns\ni\n\n  \nThe direction of the ray is a \nmember of the set of basic directions \nindicated by \ndirs\n\n  \nThere are no pieces between two \nconsecutive squares in \nS\n\n\n\n\nR\n is also a \nset \nfilter\n representing the set of \nsquares \ns\n that \nterminate some sequence \n\nS\n above.\n\n\n\nExamples of rays\n\nThis filter is true whenever a black \nknight is pinned by a white rook:\n\n  ray orthogonal (\n♖\n \n♞\n \n♚\n)\n  \n≡\n\n  \n♖\n→\n♞\n→\n♚\n\n\n\n\n\nTo match a position where some piece \nis pinned by a rook of either color, \nuse:\n\n  \n⬓\nray \northogonal (R a k)\n  \n≡\n\n  \n⬓\n♖\n→\n▲\n→\n♚\n\n\n\nSuppose the current position is the \nposition after\n\n \n1. e4 e5\n2. \n♘\nf3 \n\n♘\nc6\n\n\n\nsome rays\n\n\n\n\n\n\n\n\nOne ray that would match the position \nis \n\n  ray diagonal (c6 e4 f3)\n\n\n\nThat is because starting at \n\nc6\n the ray moves \ndiagonally, skipping over empty \nsquares (one empty square in this case\nat \nd5\n and the reaches \n\ne4\n, and then, skipping \nover zero empty squares, reaches \n\nf3\n.\n\n\nIf this position were the current \nposition, then \n♞\n represents the squares \n\n[c6,g8]\n; \n♙\n represents the squares \n\n[a2,b2,c2,d2,e4,f2,g2,h2]\n\nand \n♘\n represents the squares \n\n[f3,b1]\n. Thus, the \npictured ray would also match the \nfilter\n\n  ray diagonal (\n♞\n \n♙\n \n♘\n)\n\n\n\nLikewise, the diagram depicts a \nmatching\n\n  ray (e1 e4 e5 e8)\n\nTherefore, the following two filters \nwould also match the diagrammed \nposition:\n\nray up (\n♔\n \n♙\n \n♟\n \n♚\n)\nray up (\n♔\n \n□\n \n\n♙\n\n\n♟\n\n\n□\n \n\n♚\n)\n\n\n\nSome other matching rays in the \nposition:\n\nray right (\n♜\n \n♝\n \n♛\n \n♚\n)\nray northeast (\n♖\n \n♙\n \n♟\n \n♟\n \n♜\n)\nray diagonal (\n♗\n \n♙\n h6)\nray (\n♕\n c2)\nray orthogonal (\n♔\n \n♙\n)\n\nHowever, the following ray filter \nwould not match the position:\n\n  ray (\n♔\n \n♟\n)\n\n\n\nThis is because there is a white pawn \nbetween the king at \ne1\n \nand the best target of such a ray, the\nblack pawn at \ne5\n. \n\n\n\nExamples\n\nThe \nray\n filter is used in\n\nwurzburg-plachutta.cql"
  },
  {
    "name": "readfile",
    "parameters": "",
    "arguments": "string",
    "example": "X=readfile \"a.cqo\"",
    "link": "readfile.html",
    "description": "The \nreadfile\n filter \ntakes a single argument, a \n\nfilename\n. Its value is the \ncontents of the file named by \n\nfilename\n as a string:\n  \n    X=readfile &#34;example.cqo&#34;\n  \n\n\n\n  The \nfilename\n must have \nextension \n.pgn\n, \n\n.cqo\n or \n\n.cql\n.\n\n\n  If the filter \nfilename\n \nfails to match, is not of the proper \nformat, or if a read error occurs, CQL\nhalts.\n  \n  Otherwise, the \nreadfile\n\nfilter always matches.\n\n\n  Any use of \nreadfile\n \nforces CQL to run single-threaded\n  \nUse of readfile\n\n  readfile is typically used either \nwith a \ndictionary\n \nor with a \npersistent\n \nstring in the first game, in the first\nposition.\n\n\n  For example, suppose the file \n\nfens.cqo\n contains a list \nof FEN values and game numbers \nseparated by commas, one per line \n(like the one in the example in the \nwritefile\n \ndocumentation). We can read this file \ninto a \ndictionary\n,\nthen, for each\n  position in the current database \nwhose fen matches a fen in the \ndictionary, comment that the position \nwas seen, and the gamenumber in the \n\nfens.cqo\n file it matched\n  \n    cql(input hhdbvi.pgn)\n    if (initial and gamenumber==1){\n      Fens=readfile &#34;fens.cqo&#34;\n      while (Fens ~~ \n([^,]+),(\\d+))\n        dictionary \nFensDictionary[\\1]=\\2\n    }//end if (initial and \ngamenumber)...\n\n\n  if (OldNumber = \nFensToDictionary[fen])\n    comment (&#34;current position marked \nfor gamenumber&#34; OldNumber)\n\n\n  \n  \nNotes on using readfile\n\n  If a \nreadfile\n filter \noccurs in the code, remember that the \nfilter by default will be evaluated in\neach position, in each game, like any \nother CQL filter. As in the example \nabove, usually you will only want to \nread the file at the start of game 1 \nof the database.\n\n\n  If you are using a persistent string\nto store the contents of a file, make \nsure it is a quiet persistent string. \nOtherwise, its value will be printed \nafter CQL is finished:\n  \n    if (gamenumber==1 and initial)\n     persistent quiet FileContents = \nreadfile(filename.cqo)"
  },
  {
    "name": "removecomment",
    "parameters": "",
    "arguments": "",
    "example": "removecomment",
    "link": "removecomment.html",
    "description": "removecomment\n \nfilter deletes the original comment \nassociated with the current position:\n  \n    removecomment\n\n  The \nremovecomment\n only \nhas affect when the game is written. \nIt does not affect the \nhascomment\n or \ncomment\n \nfilters. It always matches the current\nposition.\n\n\n  The \n-n\noremovecomment\n commandline option \ndisables the effect of the \n\nremovecomment\n filter."
  },
  {
    "name": "result",
    "parameters": "",
    "arguments": "string",
    "example": "result \"1-0\"",
    "link": "result.html",
    "description": "The \nresult\n \nfilter\n takes a \nsingle \nargu\nment\n which must be \n\n1-0\n or \n0-1\n \nor \n1/2-1/2\n . The \n\nresult\n filter matches a \nposition if the result of the current \ngame equals the given result. For \nexample,\n  to find games where White wins even \nthough black has at least 4 queens at \nsome point, use\n  \n    result 1-0\n    \n♛\n≥\n4\n\n\n\n  \nresult\n can be \ntransformed using \n⬓\n\n:\n  \n    cql (input i.pgn)\n    \n⬓\n\n    {result 1-0\n     \n♛\n≥\n4}\n\n\n\n  will match games where the losing \nside, White or Black, had at least 4 \nqueens at one point."
  },
  {
    "name": "reversecolor",
    "parameters": "count",
    "arguments": "filter",
    "example": "reversecolor A attacks k",
    "link": "reversecolor.html",
    "description": "reversecolor\n is a \nrarely used \ntransform \nfilter\n. It corresponds to the \ntransform \nreversecolor\n which is\ndescribed in more detail in the \ndocumentation for \nflipcolor\n.\n\n\n  \nreversecolor \nF\n\n\n\n  matches a position \n\nreversecolor\n \n\nF\n. The effect or \n\nreversecolor\n \n\nF\n on \n\nF\n is to swap the\nroles of white and black and to flip \nthe board about the horizontal \nbisector. See the above \nlink\n for more detail.\n\nThe \n-reversecolor\n \ncommand line option\n\nThe major purpose of the \n\nreversecolor\n filter is to\nbe invoked from the command line. If \nyou have a particular CQL file that \ntests for something from one side, you\ncan test for the exact same thing from\nthe other side&#39;s point of view by \nusing the \n-reversecolor\n command line\noption.\n\n\nFor example, suppose your file \n\nfoo.cql\n has a body that \ntests for positions in which black is \nin mate and each white piece and empty\nsquare is defended exactly once:\n\n  btm mate\n  square all x in \n△\n□\n←\n♚\n\n      1==\n△\n→\nx\n\n\n\nYou can invoke this with\n\ncql -reversecolor foo.cql\n\nand the file&#39;s body  will be changed \nto\n\n  wtm mate\n  square all x in \n▲\n□\n←\n♔\n\n      1==\n▲\n→\nx\n\n\n\nThis is occasionally useful for \nexperimentation."
  },
  {
    "name": "right",
    "parameters": "range",
    "arguments": "set",
    "example": "right P",
    "link": "direction.html#rightfilter",
    "description": "right"
  },
  {
    "name": "rotate45",
    "parameters": "count",
    "arguments": "filter",
    "example": "rotate45 A attacks right k",
    "link": "rotate45.html",
    "description": "rotate45\n\n  \nrotate45\n is a rarely \nused \ntransform\n \nfilter corresponding to the rotation \nby a multiple of 45°. The set of \nall 8 such multiples is called \n\nC\n8\n and is discussed \nmore explicitly \nhere\n. \n\n\n\nrotate45\n is invoked with \na single argument filter:\n  \n rotate45 \nF\n\n\n\n  This constructs all 8 of the \nrotations of \nF\n by multiples \nof 45° The \nrotate45\n \nfilter matches if any of these 8 \ntransforms match.\n\n\n  Any square designator within \n\nF\n must represent all 64 \nsquares, and is unchanged by 45° \nrotation. The only effect of such \nrotation is to modify \ndirections\n \nfilters and keywords. For example,\n\n\n  \nrotate45 ray up (\n♖\n \n♚\n)\n\n\n\n  matches a position if and only if \none of the eight rotations of the \nfilter matches, that is, one for each \nof the compass directions:\n\n  ray up (\n♖\n \n♚\n)\n  ray northwest (\n♖\n \n♚\n)  \n  ray left (\n♖\n \n♚\n)\n  ray southwest (\n♖\n \n♚\n)\n  ray down (\n♖\n \n♚\n)\n  ray southeast (\n♖\n \n♚\n)\n  ray right (\n♖\n \n♚\n)\n  ray northeast (\n♖\n \n♚\n)\n\n\n\nThus, \nrotate45 ray up (\n♖\n \n♚\n) matches if and only if\n\n   ray (\n♖\n \n♚\n)\n\nmatches.\n\n\n\nrotate45\n follows the \nconventions of the other transform \nfilters in having a set value if its \nargument does; having a numeric value \nif its argument does; and accepting \nthe \ncount\n parameter.\n\n\n\nExamples\n\n\nrotate45\n is used in \nQq-r\notations.cql\n to find games in \nwhich all \npossible orientations of the \nconfiguration of a black and white \nqueen separated by a single piece \nappear."
  },
  {
    "name": "rotate90",
    "parameters": "count",
    "arguments": "filter",
    "example": "rotate90 A attacks up k",
    "link": "rotate90.html",
    "description": "rotate90\n\n  \nrotate90\n is a \ntransform\n \nfilter corresponding to the following \n4 \nbasic transforms\n. \n  \nid\n, the identity\n    \nrotate\n90\n: \ncounterclockwise rotation about the \nboard center by 90°\n    \nrotate\n180\n: \nrotation by 180° about the board \ncenter\n    \nrotate\n270\n: \nclockwise rotation about the board \ncenter by 90°\n    \n\n\n\n    \nrotate90\n is normally \ncalled with a single argument filter, \n\nF\n:\n    \n      rotate90 \nF\n\n\n\n    \nrotate90\n also accepts\nan optional \ncount\n \nparameter.\n    \n    \nrotate90 \nF\n \nmatches the current position if any \ntransformation of \nF\n by one of\nthe 4 basic transforms above matches \nthe current position. These 4 \ntransforms are examples of \ndihedral transforms\n.\n\n\n    For example, suppose \nF\n is\nthe filter \n{\n♔\na1 \n\n♚\nh8}, matching a position in which the\nwhite king is on \na1\n and \nthe black king is on \nh8\n. \nIf we transform this filter by \n\nrotate\n90\n we get the \nnew filter \n{\n♔\nh1 \n\n♚\na8}. That is, if spin the chessboard \n90° counterclockwise about the \ncenter of the board, the \n\na1\n square will wind up on\n\nh1\n and the \n\nh8\n square will wind up on\n\na8\n. \nThe filters that results from \ntransforming \n{\n♔\na1 \n\n♚\nh8} by all the elements of \n\nrotate90\n, which is to say\nthe identity and the three rotations, \nare:\n \n  {\n♔\na1 \n\n♚\nh8}   \n  {\n♔\nh1 \n\n♚\na8}   \n  {\n♔\na8 \n\n♚\nh1}   \n  {\n♔\nh8 \n\n♚\na1}\n    \n\n\n The filter \nrotate90 {\n♔\na1 \n\n♚\nh8} will thus match a position if any\nof these 4 filters match the position,\nthat is, if the white and black king \nare on opposite corners.\n(This can also be done, more \nefficiently, via  \n♚\n==diag\nonal 7 \n♔\n[a1,h1\n]\n )\n\n\n If \nF\n is a \nset \nfilter\n then so is \n\n\n\nrotate90 \nF\n\n\n\n in which case its value is the union \nof the values of each of the sets \nrepresented by each transformed \nversion of \nF\n.\n\n\n For example, \n\n\n\nrotate90 a1\n is the set \n\n[a1,h1,a8,h8]\n.\n\n\n If \nF\n is a \nnumer\nic filter\n then so is \n\nrotate90 \nF\n in \nwhich case its value is the maximum of\nthe values of the 4 rotations of \n\nF\n which match the position.\n\n\n\nrotate90 count \nF\n \n\n\nis a numeric filter whose value is the\nnumber of distinct matching \ntransformed versions of \nF\n. \nFor example, if the current position \nis the initial position, then\n\n\n \nrotate90 count find {\n♕\na1 \n\n♛\nh8}\n\n\n\n is equal to 0 if neither \n{\n♕\na1 \n\n♛\nh8} nor \n{\n♕\nh1 \n\n♛\na8} occur in the game; is equal to 1 \nif exactly one of these configurations\ndoes; and is equal to 2 if both of \nthem do.\n\n\n The \nrotate90\n filter also\nmodifies \ndirections\n \nparameters and filters. Thus,\n \n \nrotate90 \nray\n right (\n♖\n \n♔\n)\n\n\n\nwill match if and only if\n\n\n \nray orthogonal (\n♖\n \n♔\n)\n \n\n\nmatches."
  },
  {
    "name": "secondary",
    "parameters": "",
    "arguments": "",
    "example": "secondary",
    "link": "currentmove.html#secondary",
    "description": "secondary previous move, if any, was not a \nprimary move"
  },
  {
    "name": "settag",
    "parameters": "",
    "arguments": "(quoted stringstring or int)",
    "example": "settag(\"MyTag\" \"blunder\")",
    "link": "settag.html",
    "description": "The \nsettag\n filter \nconsists of the keyword \n\nsettag\n followed by \narguments in parentheses. The first \nargument is the name of the tag to be \nset; the second argument is the value,\nwhich must be a string.\n    \n      settag(&#34;CustomTag1&#34; &#34;value of \ntag&#34;)\n      settag(&#34;CustomTag2&#34; &#34;23&#34;)\n\n\n\n    The first argument must be a \nstring literal.\n\n\n    The \nsettag\n filter is \nintended for custom tags. It cannot be\nany of &#34;Event&#34;, &#34;Site&#34;, &#34;Date&#34;, &#34;ECO&#34;,\n&#34;FEN&#34;, &#34;Round&#34;, &#34;Result&#34;, &#34;EventDate&#34;.\nIt also cannot begin with &#34;White&#34; or \n&#34;Black&#34;.\n\n\n    The \nsettag\n filter \nalways matches unless its arguments do\nnot match.\n\n\n    The \nsettag\n filter \nonly sets the value of a tag when the \ngame in question is output to a file. \nAny \ntag\n filter \nquerying that tag will use the \noriginal value of the tag.\n\n\n    \n-nosettag command line \noption\n\n    If the command line option \n-nosettag\n\n is set, then the \n\nsettag\n filter does not \nchange any tags.\n\nExamples\n\n  Custom tags can be used for storing \ninformation about games in a way that \nis easy to parse or that are \npersistent without affecting the body \nof the game. For example, if one \nwanted a version of the HHdbVI \ndatabase that keeps the original game \nnumber in the PGN header, once just \nrun this script\n  \n    cql (input hhdbvi.pgn output \nhhdbvi-tagged.pgn silent)\n    initial\n    settag(&#34;hhdbgame&#34; \ngamenumber)\n\n\n\n  The output will have a version of \nthe HHdbVI database with the original \ngamenumber of each game in its PGN \nheader to the file \n\nhhdbvi-tagged.pgn\n. \nWhen one creates a set of games from \n\nhhdbvi-tagged.pgn\n, it is \neasy to locate games from that \ndatabase directly with a text editor."
  },
  {
    "name": "shift",
    "parameters": "count",
    "arguments": "filter",
    "example": "shift A e1 attacks kg1",
    "link": "shift.html",
    "description": "shift\n\n  Let \ni\n and \nj\n be \nintegers between -7 and 7. The \n\nbasic shift transform\n \n\nU\ni\nV\nj shifts a square \ni\n squares \nto the right and \nj\n squares \nup. (\nU\n and \nV\n are taken \nfrom the definitions of \nshiftvertica\nl\n and \nshifthoriz\nontal\n). Negative arguments shift \nin the opposite direction.\n\n\n\n\nU\n2\nV\n\n3\n [a1,d3] \n≡\n \n[c4,f6]\n  \nbecause if \na1\n is shifted \nright two squares and up 3 squares it \nbecomes \nc4\n; if \n\nd3\n is shifted right two \nsquares and up 3 squares, it becomes \n\nf6\n.\n\n\nAs a special rule, \nsuppose a square designator contains \nan entire rank, like \n\n[a-h2,c4]\n contains the \nentire second rank in addition to the \n\nc4\n square. Then any right\nor left shifts of squares on that rank\nare ignored. Thus,\n\n  \nU\n2\nV\n3\n [a-h2,c4]\n      \n≡\n\n   [a-h5,e7]\n\n\n\nThat is, \nU\n has no effect on \nfull ranks, and likewise \nV\n has \nno effect on full files.\nA basic shift transform can be \nextended to a basic shift transform of\nan arbitrary filter: each square \ndesignator appearing in the filter is \nshifted by the specified amount. \n\n\nSometimes a basic shift transform will\nresult in an empty square designator. \nFor example,\n\n  \nU\n7\nV\n7\n [a-h2,c4]\n\n\n\nwill be empty. Any empty square \ndesignator makes the whole filter \ncontaining that empty square \ndesignator empty as well.\n\n\n\nshift\n is a \ntransform\n \nfilter that represents each of the 225\nbasic shift transforms including the \nidentity.\n\n\nThe effect of \nshift \n\nF\n is first to create \nthe 225 distinct filters that result \nfrom applying each of the basic shift \ntransforms to \nF\n. Empty \nfilters and repetitions are deleted, \nand the resulting set is called the \n\norbit\n of \nshift \n\nF\n.\n\n\nFor example, the orbit of \nshift \n\n♔\na1 is 64 distinct filters, \n\n♔\na1, \n♔\nb1, and so on. \n\n\nOn the other hand, the orbit of \n\nshift {\n♔\na1 \n\n♚\na8} only contains 8 filters, namely \n\n{\n♔\na1 \n\n♚\na8}, \n\n{\n♔\nb1 \n\n♚\nb8} and so on. Any vertical shift \nresults in one of the kings going off \nthe board, and which makes the \ncorresponding filter empty.\n\n\n If \nF\n is a \nnumer\nic filter\n then so is \nshift \n\nF\n in which case its \nvalue is the maximum of the values of \nthe matching transformed versions of \n\nF\n.\n\n\n\nshift count \nF\n \n\n\nis a numeric filter whose value is the\nnumber of distinct matching \ntransformed versions of \nF\n. \nFor example, if the current position \nis the initial position, then\n\n\n \nshift count find \n♕\na1\n\n\n is the number of different squares on\nwhich there is a white queen in the \ngame."
  },
  {
    "name": "shifthorizontal",
    "parameters": "count",
    "arguments": "filter",
    "example": "shifthorizontal Ae1 attacks kg1",
    "link": "shifthorizontal.html",
    "description": "shifthorizontal\n\n  Let \ni\n be an integer between\n-7 and 7. The \nbasic horizontal \nshift transform\n \n\nU\ni\n shifts a square \non the chessboard \ni\n squares \nright. (Directions are reversed if the\nargument is negative). If the square \ngoes off the board, we say that \n\nU\ni\n is \nempty\n\nor \nundefined\n.\n\n\n  A \nhorizontal basic shift\n \ntransform acts on \nsquare designators\n. For \nexample,\n\nU\n3\n a1 \n≡\n \nd1\n  \nbecause if \na1\n is shifted \n3 squares right it becomes \n\nd1\n.\n\n\nAs a special rule, suppose a square \ndesignator contains an entire rank, \nlike \n[a-h2,c4]\n contains \nthe entire second rank in addition to \nthe \nc4\n square. Then any \nhorizontal shifts of squares on that \nrank are ignored. Thus,\n\n  \nU\n3\n [a-h2,c4]\n      \n≡\n\n   [a-h2,f4]\n\n\n\nA horizontal shift transform can be \nextended to a horizontal shift \ntransform of an arbitrary filter: each\nsquare designator appearing in the \nfilter is shifted by the specified \namount. \n\n\nSometimes a horizontal shift transform\nwill result in an empty square \ndesignator. For example,\n\n  \nU\n7\n [d2,c4]\n\n\n\nwill be empty. Any empty square \ndesignator makes the whole filter \ncontaining that empty square \ndesignator empty as well.\n\n\n\nshifthorizontal\n is a \ntransform\n \nfilter that represents each of the 15 \nbasic horizontal shift transforms \nincluding the identity.\n\n\nThe effect of \nshifthorizontal \n\nF\n is first to create \nthe 15 distinct filters that result \nfrom applying each of the basic \nhorizontal shift transforms to \n\nF\n. Empty filters and \nrepetitions are deleted, and the \nresulting set is called the \n\norbit\n of \n\nshifthorizontal \n\nF\n.\n\n\nFor example, the orbit of \n\nshifthorizontal \n♔\na1 is 8 distinct filters, \n♔\na1, \n♔\nb1, and so on. \n\n\nOn the other hand, the orbit of \n\nshifthorizontal {\n♔\na1 \n\n♚\ng1} only contains 2 filters, namely \n\n{\n♔\na1 \n\n♚\ng1}, \n\n{\n♔\nb1 \n\n♚\nh1}. Any other horizontal shift \nresults in one of the kings going off \nthe board, and which makes the \ncorresponding filter empty.\n\n\n If \nF\n is a \nnumer\nic filter\n then so is \n\nshifthorizontal \n\nF\n in which case its \nvalue is the maximum of the values of \nthe matching transformed versions of \n\nF\n.\n\n\n\nshifthorizontal count \n\nF\n \n\n\nis a numeric filter whose value is the\nnumber of distinct matching \ntransformed versions of \nF\n. \nFor example, if the current position \nis the initial position, then\n\n\n \nshifthorizontal count find \n♕\na1\n\n\n is the number of different squares on\nthe first rank on which there is a \nwhite queen in the game."
  },
  {
    "name": "shiftvertical",
    "parameters": "count",
    "arguments": "filter",
    "example": "shiftvertical Ae1 attacks kg1",
    "link": "shiftvertical.html",
    "description": "shiftvertical\n\n  Let \nj\n be an integer between\n-7 and 7. The \nbasic vertical shift\ntransform\n \n\nV\nj\n shifts a\nsquare on the chessboard \nj\n \nsquares up. (Directions are reversed \nif the argument is negative). If the \nsquare goes off the board, \nwe say that \n\nV\nj\n is \n\nempty\n or \nundefined\n.\n\n\n  A \nvertical basic shift\n \ntransform acts on \nsquare designators\n. For \nexample,\n\nV\n3\n a1 \n≡\n \na4\n  \nbecause if \na1\n is shifted \nup 3 squares it becomes \n\na4\n.\n\n\nAs a special rule, suppose a square \ndesignator contains an entire file, \nlike \n[a1-8,c4]\n contains \nthe entire a file in addition to the \n\nc4\n square. Then any \nvertical shifts of squares on that \nfile are ignored. Thus,\n\n  \nV\n3\n [a1-8,c4]\n      \n≡\n\n   [a1-8,c7]\n\n\n\nA vertical shift transform can be \nextended to a vertical shift transform\nof an arbitrary filter: each square \ndesignator appearing in the filter is \nshifted by the specified amount. \n\n\nSometimes a vertical shift transform \nwill result in an empty square \ndesignator. For example,\n\n  \nV\n7\n [a-h2,c4]\n\n\n\nwill be empty. Any empty square \ndesignator makes the whole filter \ncontaining that empty square \ndesignator empty as well.\n\n\n\nshiftvertical\n is a \ntransform\n \nfilter that represents each of the 15 \nbasic vertical shift transforms \nincluding the identity.\n\n\nThe effect of \nshiftvertical \n\nF\n is first to create \nthe 15 distinct filters that result \nfrom applying each of the basic \nvertical shift transforms to \n\nF\n. Empty filters and \nrepetitions are deleted, and the \nresulting set is called the \n\norbit\n of \nshiftvertical \n\nF\n.\n\n\nFor example, the orbit of \n\nshiftvertical \n♔\na1 is 8 distinct filters, \n♔\na1, \n♔\na2, and so on. \n\n\nOn the other hand, the orbit of \n\nshiftvertical {\n♔\na1 \n\n♚\na7} only contains 2 filters, namely \n\n{\n♔\na1 \n\n♚\na7}, \n\n{\n♔\na2 \n\n♚\na8}. Any other vertical shift results\nin one of the kings going off the \nboard, and which makes the \ncorresponding filter empty.\n\n\n If \nF\n is a \nnumer\nic filter\n then so is \n\nshiftvertical \nF\n \nin which case its value is the maximum\nof the values of the matching \ntransformed versions of \nF\n.\n\n\n\nshiftvertical count \n\nF\n \n\n\nis a numeric filter whose value is the\nnumber of distinct matching \ntransformed versions of \nF\n. \nFor example, if the current position \nis the initial position, then\n\n\n \nshiftvertical count find \n♕\na1\n\n\n is the number of different squares on\nthe a file on which there is a white \nqueen in the game."
  },
  {
    "name": "sidetomove",
    "parameters": "",
    "arguments": "",
    "example": "sidetomove==white",
    "link": "sidetomove.html",
    "description": "The \nsidetomove\n filter is \na \nnumer\nic filter\n that returns the numeric\nvalue of the side to move. Use \n\nwhite\n to represent white \nto move; use \nblack\n to \nrepresent black to move:\n\n   sidetomove==white\n\n\n\n(In fact, the value of \n\nwhite\n is \n1\n \nand the value of \nblack\n is\n\n-1\n).\n\n\nThe \nsidetomove\n filter is \noften used in the body of the  \necho\n filter to \ncheck that two positions have the same\n(or different) sides to move.\n\n\nIf \nx\n is some position, \nthen the side to move of \n\nx\n is \n\nx:sidetomove\n. Thus, to \ncheck whether the side to move of \n\nx\n is the same as the side\nto\nmove of the current position, use:\n\n  sidetomove == x:sidetomove\n\n\n\n\nExamples\n\nThe \nsidetomove\n filter is \nused in \ncastle\necho.cql\n, \nchamele\non.cql\n, \nenp\nassantecho.cql\n, \n\nflipverticalecho.cql\n, \nmovedblackpieceecho.cql\n, \nunderpromotionecho.cql\n, \nwcct7.cql\n."
  },
  {
    "name": "site",
    "parameters": "implicit search parameter",
    "arguments": "",
    "example": "site \"Berlin\"x=site",
    "link": "tagqueryfilters.html#siteentry",
    "description": "site name"
  },
  {
    "name": "sort",
    "parameters": "mindocumentation",
    "arguments": "numberorset",
    "example": "sort \"Material\" power A",
    "link": "sort.html",
    "description": "The \nsort\n filter sorts \ngames in the PGN output file. \nNormally, games appear in the PGN \noutput file in the order they appear \nin the PGN input file. When the \n\ncql\n file contains a \n\nsort\n filter, however, the\noutput games appear in sorted order. \n\n\n    The basic syntax of \n\nsort\n is just\n    \n      sort \nvalue\n\n\n\n    where \nvalue\n is a \nnumer\nic filter\n or \nstring filter\n.\n\n\n\n\n    The sort can be followed by a \n\ndocumentation string\n, a \nquoted string that\n    documents the meaning of the value\non which the sort is performed:\n    \n      sort \n\ndocumentation_string\n \n\nbody\n\n    For example:\n    \n      sort &#34;white material&#34; power \n\n△\n\n      sort &#34;material difference&#34; abs \npower \n△\n - \npower \n▲\n\n      sort &#34;move number&#34; \nmovenumber\n\n\n\n    The examples below mostly\n    don&#39;t use documentation strings \nfor simplicity, but we recommend \nalways using them sorting inside a \nreal CQL file, as they\n    add clarity to the output.\n\n\n    The effect of the \n\nsort\n filter is that its  \n\nvalue\n filter is \nexecuted as usual. \n    However, the maximum value that \nthe \nvalue\n filter ever \nobtained during the game is \nremembered.\n\n\n    After all the games are matched \nusing CQL, the\n    games in the output PGN file are \nsorted by these maximum values. A \ncomment before the first move of the \ngame indicates the maximum\n    value of that sort filter. If \nthere is a documentation string, that \ndocumentation will be used in the \ncomment.\n\n\n    For example, to sort all the games\nby decreasing length, you can use\n\n\n    \n      cql (input foo.pgn)\n       sort ply\n\n\n\n    The \nsort\n filter will \nbe evaluated at each position. \nOnly the position with maximum ply in \neach game will contribute to the final\nvalue of the \nsort\n filter.\n    This is the ply value of the \nterminal position in a game, or the \nnumber of ply in the game. By sorting \nthis way, we the longest games are \noutput first.\n\n\n    Of course only the games that \nactually match are output. For \ninstance, to sort all games that end \nin white stalemate by the the material\npower of\n    the white side at the time of the \nstalemate, you could use:\n\n\n    \n      cql(input foo.pgn)\n       stalemate\n       sort power \n△\n\n\n\n    The \nsort\n filter \nitself is a numeric or string filter \nwhose value is the value of its \n\nvalue\n filter in a given \nposition. If this \nvalue\n  does\nnot match the position, neither does \nthe \nsort\n filter. \n\n\n    Suppose you want to sort by the \nmaximum ply value but you only want to\nconsider games with at least 200 ply. \nThen you could use\n    \n     200&lt;=sort ply\n\n    Whenever the ply of a position is \nsmaller than 200, the \n\n&lt;=\n filter will fail \nand the position will not be \nconsidered in a sort.\n                                     \n   You could also write here\n   \n   sort ply \n≥\n \n200\n\n\n\n   This is parsed as\n\n\n    \n    {sort ply} \n≥\n \n200\n\nwhich has the same effect.\n\n\nA sort of a \nset \nfilter\n is also converted to a sort\non the cardinality of that set. That \nis,\n\n sort \nsetfilter\n      \n   \n≡\n\n  sort #\nsetfilter\n\n\n\nwhere \nsetfilter\n \nis a set filter.\n\n\nFor example, the following CQL file \nwill sort games with at least four \nqueens in the same position\nby the maximum number of queens in \nsuch a position:\n\n   cql (input i.pgn)\n   sort\n     [\n♕\n♛\n] \n\n≥\n 4\n\n\n\nBecause \nsort\n itself is \nnumeric, the above code is equivalent \nto:\n\n  cql (input i.pgn)\n  {sort #[\n♕\n♛\n]} \n\n≥\n 4\n\n\n\n  \n  \n sort with \nstrings\n\nNew in CQL 6.1 is the ability to sort \nby \nstrings\n \nvalues. For example, to sort \nalphabetically by the white player, \nuse\n\n  sort &#34;White player&#34; player \nwhite\n\n\n\n\nsort\n can also be used to \nsort by date, since the value of the \n\ndate&lt;\n/a&gt; filter is a string that can be \nsorted:\n\n\n\n  sort &#34;Date&#34; date\n\n\n\nWhere available, one can sort by the \nUTCDate:\n\n\n\n  sort &#34;UTCDate&#34; tag &#34;UTCDate&#34;\n\n\n\nThis offers higher-grained resolution \nthan \ndate\n and can be \nused, for example, to sort games from \nsites like \nlichess\n where \nmany games by the same player are \nplayed on the same day and one wants \nto sort these within a day by \ntime-of-day played.\n\n\n\nValue of unmatched \nfilter\n\nOccasionally a \nsort\n \nfilter will not match a position even \nthough the game as whole matches the \n\n.cql\n file.\nCQL uses a special value for unmatched\nsort filters. This value is always \nsorted after any values corresponding \nto matched filters; it is considered \n&#34;worse&#34; than any matched value.\n\n\nSuppose, for example, we want to sort \nall games descending by date in which \nKasparov was a player:\n\n\n\n  cql(input data.pgn)\n  player &#34;Kasparov&#34;\n  sort &#34;Date&#34; date\n\n\n\nIn this example, every matched game \nwill have Kasparov as a player. But \nsuppose we now want to include all the\nother games as well, just not sorted. \nWe can do:\n\n  cql(input data.pgn)\n  \nif\n player \n&#34;Kasparov&#34;\n     sort &#34;Date&#34; date\n\n\n\nThis will match every game in the \ndatabase (because if the test clause \nof an \nif\n filter fails, \nand there is no \nelse\n, the\n\nif\n filter will match). \nBut only games in which Kasparov was a\nplayer will actually have a \ncorresponding \nsort\n value.\nThe other games will appear after all \nthe Kasparov games in the database, \nbut those other will not be sorted by \ndate. They will just appear in the \norder they appeared in the input \n\n.pgn\n file.\n\n\n(Note that the same effect would be \nachieved by:\n\n  cql(input data.pgn)\n  {sort &#34;Date&#34; \n    {player &#34;Kasparov&#34;\n      date}}\n  or true\n\n\n).\n\n\nNow suppose the \nsort\n was \nby increasing date:\n\n  sort min &#34;Date&#34; date\n\n\n\nHere, the Kasparov games would appear \nby increasing date, but again all the \nnon-Kasparov games would appear \nafterwards, in their original database\norder. It is as if each of these \nunmatched filters were supplied a \nspecial \ndate\n value that \nwas worse than any other date, no \nmatter whether the sort was increasing\nor decreasing. \n\n\n\nquiet parameter\n\nIf \nsort\n is followed by \nthe keyword \nquiet\n, \nthe comment before the first move that\n\nsort\n normally outputs is \nsuppressed:\n\n  sort quiet A attacks a\n\n\n\n  \n Multiple sorts\n\n  You can sort by multiple filters.\n\n\n  When multiple filters are sorted, \nthe output is sorted by each filter in\nthe order the filters occur in the CQL\nfile.\n  For example, to following CQL file \nsorts by the maximum number of White \npins in a position, and then by year. \nThat is, if two\n  game have the same number of pins, \nthen they will be output together with\nthe most recent first:\n\n\n  \n    cql(input i.pgn)\n     sort &#34;Number of pins&#34; pin\n     1800 &lt; sort &#34;Year&#34; year\n\n\n\n  \n        \n   \n Sorting under \ntransforms/multiple sorts with the \nsame documentation string\n\n   All sorts with the same (nonempty) \ndocumentation strings are combined in \nthe sense that the maximum from any of\nthem is used as a sort.\n\n\nThus, to sort on the maximum of the \nnumbers of queens and rooks in a \nposition, you could  use\n   \n     sort &#34;maxqr&#34; [\n♕\nq]\n     sort &#34;maxqr&#34; [Rr]\n\n\n\nIn consequence, the \nsort\n \nbehaves as expected when it is \ntransformed. For example, to sort on \nthe maximum numbers of either white or\nblack queens in a position, use\n  \n⬓\n \nsort &#34;maxqs&#34; \n♕\n\n\n\n  \n Sorting by \nmatchcount \n\n  \nTo sort by the \nm\natchcount\n (the number of positions\nin the game that matched,\nassuming this number lies within the \nrange of the \nmatchcount\n) \npreface the \nmatchcount\n \nCQL parameter\nwith \nsort\n as in:\n\n  cql(input i.pgn sort matchcount 10 \n1000)\n   check\n\n\n\nThe above code finds games in which \nthe \ncheck\n filter matches \nat least 10 positions, that is, in \nwhich there\nare at least 10 checks, and outputs \nthese in order of decreasing number of\nchecks.\n\n\nA  \nsort matchcount\n can \nonly appear in the CQL header, cannot \nhave a documentation string, and \ncannot be sorted by \nmin\n.\n\n\n  \nsorting by minimum \ninstead of the maximum\n\n  By default, \nsort\n sorts \ngames by the maximum attained value of\nits argument \nvalue\n filter. \nHowever, if the keyword \n\nsort\n is immediately \nfollowed by the word \nmin\n,\nthen games are sorted by the \n\nminimum\n attained value of its\nargument filter. In this case, the \ngames are sorted in ascending order \ninstead of descending order.\n\n\n  (Note: because \nmin\n can \nbe  a parameter or a \nmin filter\n, to \nsort by a \nmin\n filter \nenclose that filter in braces: \n\nsort {min(x y)}\n)\n  \nAn example of this usage is in the \nfile \npins\ntalemate.cql\n. The line:\n\n\n  \nsort min &#34;material&#34; power \n.\n\n  has the effect of sorting the games \nin order of increasing material. \n(Actually, in this example there is \nanother sort\n  by number of pins that comes first, \nso the games will be sorted first by \ndescending order of the number pins, \nand then by ascending order by the \nmaterial.)"
  },
  {
    "name": "sqrt",
    "parameters": "",
    "arguments": "number",
    "example": "sqrt 10000",
    "link": "sqrt.html",
    "description": "The \nsqrt\n filter is a \nnumer\nic filter\n whose \nvalue\n is \nthe integer square root of its \nargument:\n  \n    sqrt 4 \n≡\n 2\n    sqrt 26 \n≡\n \n5\n\n  If the argument to the \n\nsqrt\n filter does not \nmatch the \ncurrentpos\nition\n, neither does the \n\nsqrt\n filter. If the \nargument to \nsqrt\n is \nnegative, the \nsqrt\n filter\ndoes not match the position.\n\n\n  The \nsqrt\n filter is \nmainly used in computing the Euclidean\ndistance between two squares \n\ns\n and \nt\n, but the \ndistance\n  has to be scaled because CQL only \nhas integers. See the cql file \na\nveragedistance.cql\n for an example \nof this usage."
  },
  {
    "name": "square",
    "parameters": "inall",
    "arguments": "filter",
    "example": "square s in _ k attacks s",
    "link": "square.html",
    "description": "square filter\n consists of \nthe keyword \nsquare\n, then \nan optional keyword \nall\n, \nthen a variable,\nthen the keyword \nin\n, then\na set filter, then an arbitrary \nfilter:\n\n  square \nvariable\n in \n\nin_filter\n \nbody\n\n  square all \nvariable\n in \n\nin_filter\n \nbody\n\n\n\nHere, \nvariable\n is a set \nvariable; \nin_filter\n is a set \nfilter; and \nbody\n is any \nfilter.\n\n\nFor example,\n\n\n\n  square x in \n♖\n\n      x\n→\n♚\n\n\n\n  square z in a1-8\n      a\n→\nz\n\n\n  square all z in A  \n     power z&lt;2\n\n\n\nIn the first example above, \n\nvariable\n is \nx\n; \n\nin_filter\n is \n♖\n; and \nbody\n is \nx\n→\n♚\n.\n\n\nThe operation of the square filter \nwhen the the optional \nall\n\nparameter is absent is as follows:\n\n\n\n The set \nin\n represented \nby \nin_filter\n in the current \nposition is computed\n\n For each square \ns\n in \n\nin\n,\n  \n\n      \nthe variable \nx\n is \nset to \ns\n. \n      \n(*) \nbody\n is \nevaluated in the current position\n\n\n The \nsquare\n \nfilter represents the set of \n\ns\n in \nin\n for which \n\nbody\n was true in step \n(*)\n\n\n\n\n\nThe operation of the square filter \nwhen the \nall\n parameter \n\nis\n present is similar:\n\n\n\n The set \nin\n represented \nby \nin_filter\n in the current \nposition is computed\n\n For each square \ns\n in \n\nin\n,\n  \n\n      \nthe variable \nx\n is \nset to \ns\n. \n      \n(*) \nbody\n is \nevaluated in the current position\n\n\n The \nsquare\n filter \nmatches the position if \nbody\n \nis never false in step (*): for each \n\ns\n in \nin\n, the \n\nbody\n is true\n\n\n\nThus, a \nsquare\n filter is \na set filter only if the \n\nall\n parameter is  absent.\n\n\n\nExample of a square filter\n\nSuppose the current position is set to\nthe following position:\n\n\n\n\n\n\n\n\n\nNow let&#39;s compute what happens when \nthe following \nsquare\n \nfilter is evaluted on that position:\n\nsquare x in h1-8\n   \n♖\n→\nx\n   x\n→\n♔\n\n\n\nTo determine the set of squares \nrepresented by this square filter in \nthe diagram, the variable \n\nx\n will be successively \nset to each square in the\nset represented by the following the \nword \nin\n, namely \n\nh1-8\n. \n\n\nThe square filter will match an \nassignment of \nx\n to a \nparticular square only if a white rook\nattacks that square and if that square\nattacks the white King.\nIn the current position, note that:\n\n♛\nh3 attacks the white king&#39;s square \nand is attacked by a white rook - \nmatch! \n  \n♞\nh6 attacks the white king&#39;s square \nbut is NOT attacked by the white rook \n- no match\n  \n♘\nh4 attacks the white king&#39;s square \nbut is NOT attacked by the white rook \n- no match\n  \n♗\nh7 attacks the white king&#39;s square \nand is attacked by \n♖\na7 - \nmatch!\n\n\nall other squares on the h-file fail \nboth clauses\nThe result is that filter matches when\n\nx\n is either \n\nh3\n or \nh7\n.\n\n\nTherefore, the square filter \nrepresents the\nset of squares consisting of \n\nh3\n and \nh7\n. \nIn particular, the square filter will \nmatch the current position."
  },
  {
    "name": "stalemate",
    "parameters": "",
    "arguments": "",
    "example": "stalemate",
    "link": "stalemate.html",
    "description": "The \nstalemate\n filter \nmatches a position in which one side \nhas been stalemated:\n\n  stalemate\n\n\nExamples\n\nAn example of \nstalemate\n \nuse in finding mirror stalemates \n(where the the stalemated king is \nsurrounded by empty squares) is in the\nfile \nm\nirrorstalemate.cql\n, which finds \nthe following position:\n\nMatous 2007, after 6....Q:g8\n \n\n(found from CQL file: \nm\nirrorstalemate.cql\n)"
  },
  {
    "name": "str",
    "parameters": "",
    "arguments": "(filter...)",
    "example": "X=str(\"K on: \" K)",
    "link": "str.html",
    "description": "The \nstr\n filter has a \nlist of arguments enclosed in \nparentheses. Its value is the \nconcatenation of the result of \nconverting each of its arguments into \nstrings.\n\n\n  The \nstr\n filter uses \nexactly the same conventions for \nstring conversions as do \nmessage\n and \ncomment\n.\n\n\n  The \nstr\n filter always \nmatches the current position.\n\n\n  \n    X=str(&#34;pin&#34;) // X is &#34;hello&#34;\n    X=str(&#34;pin&#34; &#34;mate&#34; 43) // X is \n&#34;pinmate43&#34;\n    X=str(2&lt;1 K) // X is \n&#34;&lt;false&gt;e1&#34; (if K is on e1)\n    X=str(&#34;pin&#34; \\n &#34;mate&#34;) // these \nwords are separated by newlines\n\n\n\n  As with \nmessage\n and \n\ncomment\n, parentheses may \nbe omitted if \nstr\n has \nonly one argument:\n  \n    X=&#34;pin&#34;\n    str X \n≡\n \n&#34;pin&#34;\n\n  \nimplicit search \nparameter; fen special treatment\n\n  When a quoted string appears after a\nfilter that is an argument to \n\nstr\n, it can be unclear \nwhether the\n  quoted string is intended to be a \nparameter to the filter or an argument\nto \nstr\n. For example, \nconsider\n  \n    message(\n\nsite\n &#34;is Malta&#34;)\n\n  The filter \nsite &#34;is \nMalta&#34;\n is true when \n&#34;is \nMalta&#34;\n is a substring of the \n\nsite\n, that is,\n  \nsite &#34;isMalta&#34;\n is a \nsingle filter, and the \n\nmessage\n filter thus has a\nsingle argument.\n\n\n  Most of the time this behavior is \nunwanted. CQL interprets quoted \nstrings after certain filters \nspecially to make sure that the quoted\nstring is considered to be an argument\nto \nstr\n and not a \nparameter to the filter.\n\n\nMore formally,\n  \n  Suppose \nF\n is a\nfilter that takes an \nimplicit \nsearch parameter\n. Let \n\nL\n be a string \nliteral. Then\n  \n    str(\nF\n \nL\n)\n    \n≡\n\n    str({\nF\n} \nL\n)\n\n\n\n\n  For example,\n  \n    message (player white &#34; is playing\nwhite&#34;)\n\n    will output the name of the player\nplaying white, because the arguments \nare parsed\n    as\n  \n    message ({player white} &#34; is \nplaying white&#34;)\n\n  and not  as\n  \n    message({player white &#34; is playing\nwhite&#34;})\n       \n≡\n\n    message(&#34; is playing white&#34; in \nplayer white)\n\n\n\n  The effect of the last previous \nmessage above would be to output the \nstring \n&lt;false&gt;\n \nsince\n  the string \n&#34; is playing \nwhite&#34;\n is presumably not \nsubstring of the value of \nplayer\nwhite\n.\n\n\n  The \nfen\n \nfilter is likewise parsed so as to \ninterpret its quoted string argument, \nif any, as being an argument to the \n\nstr\n not to the \n\nfen\n:\n  \n    str(fen \nL\n)\n     \n≡\n\n    str ({fen} \nL\n)\n\n\n\n  In practice, this is the natural and\nexpected behavior virtually all the \ntime, and does not to be considered \nexplicitly by the user."
  },
  {
    "name": "tag",
    "parameters": "",
    "arguments": "quoted string",
    "example": "tag \"UTCDate\"",
    "link": "tag.html",
    "description": "The \ntag\n consists of the\nkeyword \ntag\n followed by a\nnonempty quoted string, the \n\nname\n.\n  \n    tag &#34;White&#34;\n    tag &#34;CustomTag&#34;\n\n\n\n  The value of the \ntag\n \nfilter is the value of the tag named \n\nname\n in the PGN header. If no\nsuch tag exists, th \ntag\n \nfilter fails to match. The \n\nname\n is case-sensitive.\n\n\n  CQL currently does not support \n&#34;FEN&#34;, &#34;Round&#34;, &#34;Result&#34; as allowed \ntag names to query with \n\ntag\n. In addition, \n\ntag\n does not support any \ntag name beginning with the strings \n&#34;White&#34; or &#34;Black&#34;, other than those \nexact strings.\n\n\n  \nExamples\n\n  The \ntag\n filter can be \nused to get a higher-precision date \nsort among those databases\n  that support the UTCDate tag:\n  \n    sort &#34;UTC Date&#34; tag \n&#34;UTCDate&#34;\n\n  The \ntag\n filter is also \nuseful for accessing custom tags \ncreated with \nsettag\n :\n  \n    X=tag &#34;CustomTag&#34;"
  },
  {
    "name": "terminal",
    "parameters": "",
    "arguments": "",
    "example": "terminal",
    "link": "terminal.html",
    "description": "The \nterminal\n filter \nmatches the \ncurrentpos\nition\n if the current position is a\n\n\nterminal position\n position, which \nmeans it has no children.\n\n  terminal\n\n\n\nBy default, CQL considers only \nmainline\n\n positions, when there is only one\nterminal position. However, if \n\nvariations\n is set in the \nCQL header, then there may be multiple\nterminal positions, as the last \nposition of each variation is a \nterminal position.\n\n\nNote that \nterminal\n is \nequivalent to the filter \nnot \nchild\n , \nsince a position is terminal if and \nonly if it has no child."
  },
  {
    "name": "to",
    "parameters": "",
    "arguments": "",
    "example": "y=to",
    "link": "currentmove.html#fromto",
    "description": "from\n \nand \nto\n under \ncastling"
  },
  {
    "name": "true",
    "parameters": "",
    "arguments": "",
    "example": "true",
    "link": "true.html",
    "description": "The \ntrue\n filter is always\ntrue. It matches any position:\n\n  true"
  },
  {
    "name": "try",
    "parameters": "",
    "arguments": "",
    "example": "try",
    "link": "try.html",
    "description": "The \ntry\n filter matches \na position if the position represents \na top-level white try. We define this \nas meaning that there is precisely one\nwhite move leading to that position \nthat is not a \nprim\nary\n move. \n \n\n\n  The \ntry\n filter can be \n(and in fact is) defined as an \nabbreviation for the following CQL \ncode:\n\n  1==find &lt;-- quiet all {btm \nsecondary}\n \n\n\n\nIn a sound study without duals, every \nposition for which \ntry\n is\ntrue is worse for white than the study\nstipulation. Thus, in a win study, \nevery such position is drawn or lost \nfor white; in a draw study, every such\nposition is lost for white.\n\n\nThe \ntry\n filter is \ntypically used with \necho\n \nto help remove false positives."
  },
  {
    "name": "type",
    "parameters": "",
    "arguments": "set",
    "example": "type d4",
    "link": "type.html",
    "description": "The \ntype\n filter takes one\nargument, a set filter. It returns a \nnumber that represents the type of the\npiece\non that square:\n\n\n\n  x=type a1\n  y=type h1\n  x==y\n\n\n\nIf its argument set filter does not \nrepresent a set that has exactly one \nelement, the \ntype\n filter \ndoes not match the position.\nOtherwise, suppose \ns\n is the \nsquare represented by the argument set\nfilter. The numeric values of the \npiece types are given by the following\ntable:\n\n\n  \nPiece \ntype\nValue\n\n  \nempty\n0\n\n  \npawn\n1\n\n  \nknight\n2\n\n  \nbishop\n3\n\n  \nrook\n4\n\n  \nqueen\n5\n\n  \nking\n6"
  },
  {
    "name": "typename",
    "parameters": "",
    "arguments": "set",
    "example": "typename d4",
    "link": "typename.html",
    "description": "If \nF\n is a set filter then\n  \n    typename \nF\n \n\n  operates as follows. First, \n\nF\n is evaluated in the current\nposition to get a set of squares \n\nX\n .\n  If \nX\n does not contain \nexactly one square, then the filter \ndoes not match.\n\n\n  Otherwise, the filter returns \none-character string denoting the type\nof the contents of the\n  square in \nX\n, one of \n\nR\n, \nN\n, \n\nB\n, \nQ\n, \n\nK\n, \nP\n or \n\n_\n.\n\n\n  For example, one way to check \nwhether the previous move was an \nunderpromotion would be:\n  \n    typename from==&#34;P&#34;\n    typename to in &#34;RNB&#34;\n\n\n\n  (This is equivalent to\n  \n    currentmove \n――\n=\n\n♖\n♗\n♘\n\n\n\n  \nExamples\n\n  \ntypename\n is used in \nbabson3.c\nql\n as well as \nhorizontallysymmetric.cql\n, \nwhich finds this study:\n  \nKorolkov 1972\n \n(found \nfrom CQL file: \nhorizontallysymmetric.cql\n)"
  },
  {
    "name": "unbind",
    "parameters": "",
    "arguments": "variabledictionarydictionary[string]",
    "example": "unbind Xunbind Dict[\"ch\"]",
    "link": "unbind.html",
    "description": "The \nunbind\n filter removes\nthe value associated with a \nvariable\n, \ndictionary\n,\nor dictionary entry.\n\n\n  With a variable:\n  \n    Foo=1\n    unbind Foo\n    isunbound Foo //matches\n  \n\n\n\n  With a dictionary:\n\n    dictionary D\n    D[&#34;check&#34;]=&#34;mate&#34;\n    D[&#34;back&#34;]=&#34;rank&#34;\n    unbind D[&#34;check&#34;]\n    unbind D\n\n\n\n\nFor more information on \n\nunbind\n with dictionaries,\nsee \nunbind\n."
  },
  {
    "name": "up",
    "parameters": "range",
    "arguments": "set",
    "example": "up P",
    "link": "direction.html#upfilter",
    "description": "up"
  },
  {
    "name": "uppercase",
    "parameters": "",
    "arguments": "string",
    "example": "uppercase \"tal\"==\"TAL\"",
    "link": "caseconversion.html#uppercase",
    "description": "uppercase"
  },
  {
    "name": "variation",
    "parameters": "",
    "arguments": "",
    "example": "variation",
    "link": "variation.html",
    "description": "The \nvariation\n filter \nmatches the \ncurrentpos\nition\n if the current position has \n\ndepth\n \ngreater than 0, that is, if the \ncurrent position is not a \nmainline\n \nposition.\n\n  variation\n\n\n\nBy default, no positions considered by\nCQL are variation positions,\nso \nvariation\n is always \nfalse. If CQL has \nv\nariations\n set in the CQL header, \nor was invoked with the \n\n-variations\n flag, then \nsome positions might be variations."
  },
  {
    "name": "virtualmainline",
    "parameters": "",
    "arguments": "",
    "example": "virtualmainline",
    "link": "virtualmainline.html",
    "description": "virtual mainline\n\nIn studies, we sometimes have several \nmain lines,for example one that leads \nto a win with a rook promotion and \nanother that leads to a win with a \nbishop promotion. However, the PGN \nfile standard forces one of these \nvariations to be the &#34;main&#34; line, and \nthe other to be a &#34;variation&#34;. This \nmay lead to inaccurate searches or to \nincorrect artistic evaluation.\n\n\nThe filter \n\nvirtualmainline\n allows us\nto overcome this technical limitation \nof the PGN standard.\n\n\nA position is in a \nvirtual \nmainline\n if all of its ancestor \nbranches were initiated by black. For \nexample, consider the PGN file:\n\n  1.e4 (1.d4 d5)\n        c5 (1..\ne5\n\n            2.\nNf3\n (2.f4 \n\nd6\n)\n          d6)\n\n\n\nThe 3 positions following each of the \nhighlighted moves would \nmatch a \nvirtualmainline\n \nfilter. The position after the \nnot-highlightd\n\n2..d6\n is not a \nvirtualmainline because it is arrived \nat after a white initiated branch \nrepresented by the move \n\n2.f4\n\n\n\nMore formally, there are three rules \nthat determine the set of virtual \nmainline positions in a PGN file:\n    \n\n      \nThe \ninitial \nposition\n is a virtual mainline \nposition.\n\n      \nIf a position is a \nblack-to-move virtual mainline \nposition, then its children are all \nvirtual mainline positions.\n\n      \nIf a position is a \nwhite-to-move virtual mainline \nposition, then its \nprim\nary child\n is a virtual mainline \nposition\n\n    \n\n    The set of virtual mainline \npositions is the set of positions \nclassified as virtual mainline using \nonly the above three rules. \n\n\n    The \nvirtualmainline\n \nfilter matches a position that is a \nvirtual mainline position:\n\n\n    \n      virtualmainline\n\n\n\n    Note that this only makes sense if\n\nvariations\n is set in the \nCQL header, which you \nmust\n do\nexplicitly. If \nvariations\n\nis not set, then every position is a \n\nmainline\n \nposition, and thus also a virtual \nmainline position as well.\n\n\n    You can also use the command line \noption \n-virtualmainline\n, \nwhich is an abbreviation for \n\n-cql virtualmainline\n. The\n\n-virtualmainline\n command \nline option also sets the \n\nvariations\n flag.\n\n\n    Note that \n\n-virtualmainline\n differs \nfrom \n-variations\n or \n\n-mainline\n in that \n\n-virtualmainline\n does not\napply recursively to \nmove\n or to \npositions considered within filters \nthat modify the current position (like\n\nfind\n, \nline\n, \necho\n)."
  },
  {
    "name": "while: standard form",
    "parameters": "(test)body",
    "arguments": "",
    "example": "while(x<3){z+=1 x+=1}",
    "link": "while.html#standard",
    "description": "The standard form of\nthe while filter"
  },
  {
    "name": "while: ~~ form",
    "parameters": "(target~~pattern)body",
    "arguments": "",
    "example": "while(player~~\".\")...",
    "link": "while.html#tildetilde",
    "description": "The ~~ form of the\nwhile filter"
  },
  {
    "name": "white",
    "parameters": "",
    "arguments": "",
    "example": "white",
    "link": "white.html",
    "description": "The \nwhite\n filter is a \nnumer\nic filter\n that represents the \ncolor \nwhite\n. Its value is\n\n1\n:\n\n\n\n  sidetomove==white"
  },
  {
    "name": "writefile",
    "parameters": "",
    "arguments": "(filename contents)",
    "example": "writefile(\"a.cqo\" fen)",
    "link": "writefile.html",
    "description": "The \nwritefile\n filter \ntakes two arguments enclosed in \nparentheses, a \nfilename\n and a\n\nmessage\n. Each argument should\nbe a \nstring \nfilter\n:\n  \n    writefile (\nfilename\n \n\nmessage\n)\n    writefile (&#34;output.cqo&#34; str(fen \n\\n))\n    writefile (&#34;sample.cqo&#34; \nstr(&#34;number white pieces: &#34; #A \n\\n))\n\n\n\n  The \nfilename\n argument \nspecifies the name of a file to write \nto. The first time\n  \nwritefile\n is invoked on\na specific filename, that file is \nopened and any preexisting contents of\nthat file are deleted.\n\n\n  All remaining invocations of \n\nwritefile\n will append the\n\nmessage\n to the file \n\nfilename\n.\n  Using \nwritefile\n forces \nCQL to run single-threaded.\n\n\n  The \nfilename\n must have \nextension \n.cqo\n.\n\n\n  CQL will halt if the \n\nfilename\n filter fails to \nmatch, the \nmessage\n filter \nfails to match, or the write fails for\nany reason.\n  \n  \nExample\n\n  The following code outputs to the \nfile \nfens.cqo\n the FEN of \nthe current position and the current \ngame number, separated by a comma:\n  \n    cql(input hhdbvi.pgn)\n    writefile (&#34;fens.cqo&#34;\n               str(fen &#34;,&#34; gamenumber \n\\n))"
  },
  {
    "name": "wtm",
    "parameters": "",
    "arguments": "",
    "example": "wtm",
    "link": "wtm.html",
    "description": "# wtm Filter\n\nThe wtm filter matches a position which is white to move:\n\n    wtm"
  },
  {
    "name": "year",
    "parameters": "",
    "arguments": "",
    "example": "year>2000",
    "link": "year.html",
    "description": "# Year Filter\n\nThe year filter is a numeric filter whose value is the year of the game:\n\n    year\n    year>1900\n\nThe year filter can also be specified on the command line using `-year`, where it can be followed by a range to limit the years under consideration.\n\nIf the year is unknown or missing, the filter does not match the position."
  }
]